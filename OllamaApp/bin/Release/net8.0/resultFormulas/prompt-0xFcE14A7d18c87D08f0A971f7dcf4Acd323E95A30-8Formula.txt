```csharp
// Assembly info for PNL calculation without messages for user
[assembly: System.Reflection.AssemblyTitle("PNLCalculator")]
[assembly: System.Reflection.AssemblyDescription("C# Formula method for UniswapV2 swap method")]
[assembly: System.Reflection.AssemblyCompany("Your Company Name")]
[assembly: System.Reflection.AssemblyProduct("PNLCalculator")]
[assembly: System.Reflection.AssemblyCopyright("Copyright Â© Your Company 2023")]
[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

using System;

public class PNLCalculator
{
    public decimal CalculatePNL(decimal amount0Out, decimal amount1Out, decimal reserve0, decimal reserve1, decimal balance0, decimal balance1, decimal userBalance0, decimal userBalance1)
    {
        // Calculate the amount of tokens that would be transferred back to the contract after the swap
        decimal amount0In = Math.Max(balance0 - (reserve0 - amount0Out), 0);
        decimal amount1In = Math.Max(balance1 - (reserve1 - amount1Out), 0);

        // Calculate user's new balance after the swap
        decimal newUserBalance0 = userBalance0 - amount0Out;
        decimal newUserBalance1 = userBalance1 - amount1Out;

        // Calculate PNL for token0 and token1
        decimal pnlToken0 = (newUserBalance0 * reserve0 / balance0) - userBalance0;
        decimal pnlToken1 = (newUserBalance1 * reserve1 / balance1) - userBalance1;

        // If the receiving address is the same as sender's address, PNL is calculated differently
        if (amount0Out == 0 && amount1Out > 0 || amount1Out == 0 && amount0Out > 0)
            return pnlToken0 + pnlToken1;

        // Calculate total value of tokens received and sent by the user in Eth
        decimal totalValueReceived = (amount1Out * reserve0 / balance0);
        decimal totalValueSent = (amount0In * reserve1 / balance1) + (amount1In * reserve0 / balance0);

        // Calculate PNL in Eth, subtracting fee from the total value received
        return totalValueReceived - totalValueSent;
    }
}
```