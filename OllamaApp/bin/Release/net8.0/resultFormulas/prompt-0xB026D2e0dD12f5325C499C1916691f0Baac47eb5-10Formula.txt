[assembly: FormulaAssembly("Sync")]

namespace Sauron.Formula.Sync
{
    public class SyncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            // Check if transaction contains token0 and token1 transfers
            var token0Transfer = info.Transfers?.FirstOrDefault(t => t.TokenInfo?.Symbol == "token0");
            var token1Transfer = info.Transfers?.FirstOrDefault(t => t.TokenInfo?.Symbol == "token1");

            if (token0Transfer == null || token1Transfer == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("Missing transfers for token0 or token1.");

            // Get token prices
            var tokenPricesDict = tokenPrices?.ToDictionary(kvp => kvp.Key, kvp => new BigDecimal((decimal)kvp.Value));
            if (!tokenPricesDict.ContainsKey("token0") || !tokenPricesDict.ContainsKey("token1"))
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("Missing prices for token0 or token1.");

            // Calculate PNL for user addresses in Eth (assuming each token transfer's address is the user)
            foreach (var transfer in info.Transfers)
            {
                if (!result.ContainsKey(transfer.Address))
                    result[transfer.Address] = BigDecimal.Zero;

                var amountInEth = transfer.TokenInfo?.Symbol == "token0" ?
                    token0Transfer.Amount * tokenPricesDict["token0"] :
                    token1Transfer.Amount * tokenPricesDict["token1"];

                // Subtract Fee if user sends money, add amountInEth if user receives money
                result[transfer.Address] += transfer.Address == info.FromAddress ? -info.Fee : amountInEth;
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}