```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Sauron.Core;
using Sauron.Formula;

namespace Sauron.Formula.Burn
{
    public class BurnFormula : IFormulaPlugin
    {
        public CalculationResult<BigDecimal?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.FunctionName != "burn")
                return new CalculationResult<BigDecimal?>("Invalid function name.", null);

            var balance0 = BigDecimal.FromString(info.TransactionOutputs.FirstOrDefault(x => x.Key == "balance0").Value?.ToString());
            var balance1 = BigDecimal.FromString(info.TransactionOutputs.FirstOrDefault(x => x.Key == "balance1").Value?.ToString());
            var totalSupply = BigDecimal.FromString(info.TransactionOutputs.FirstOrDefault(x => x.Key == "_totalSupply").Value?.ToString());
            var liquidity = BigDecimal.FromString(info.TransactionOutputs.FirstOrDefault(x => x.Key == "liquidity").Value?.ToString());
            var feeOn = bool.Parse(info.TransactionInputs.FirstOrDefault(x => x.Key == "_mintFee").Value?.ToString() ?? "false");

            if (balance0 <= 0 || balance1 <= 0)
                return new CalculationResult<BigDecimal?>("Insufficient liquidity burned.", null);

            var amount0 = liquidity * balance0 / totalSupply;
            var amount1 = liquidity * balance1 / totalSupply;

            BigDecimal pnl = 0;
            if (feeOn)
                pnl -= info.GasUsed * info.GasPrice;

            // If the recipient address is not the sender, it's a transfer and the user loses money
            if (info.ToAddress != info.FromAddress)
            {
                var price0 = BigDecimal.FromDecimal(tokenPrices?.FirstOrDefault(x => x.Key == "token0").Value ?? 0);
                var price1 = BigDecimal.FromDecimal(tokenPrices?.FirstOrDefault(x => x.Key == "token1").Value ?? 0);

                pnl -= amount0 * price0 + amount1 * price1;
            }

            return new CalculationResult<BigDecimal?>(null, pnl);
        }
    }
}
```