```csharp
using System;
using System.Collections.Generic;
using System.Numerics;
using Sauron.Core;
using Sauron.Interfaces;

namespace Sauron.Formula.BurnFormula
{
    public class BurnFormula : IFormulaPlugin
    {
        public CalculationResult<BigDecimal?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the relevant data from TransactionInfo object
            var reserve0 = (BigDecimal)info.Reserves[0];
            var reserve1 = (BigDecimal)info.Reserves[1];
            var balance0 = (BigDecimal)info.Balances[0];
            var balance1 = (BigDecimal)info.Balances[1];
            var liquidity = (BigDecimal)info.Liquidity;
            var totalSupply = (BigDecimal)info.TotalSupply;
            var toAddress = info.To;
            var fromAddress = info.From;

            // Calculate the burned amounts
            BigDecimal amount0 = liquidity * balance0 / totalSupply;
            BigDecimal amount1 = liquidity * balance1 / totalSupply;

            // If recipient is not sender, calculate PNL (sender lost tokens)
            if (toAddress != fromAddress)
            {
                var token0Price = tokenPrices?.FirstOrDefault(t => t.Key == info.Token0).Value ?? 1m;
                var token1Price = tokenPrices?.FirstOrDefault(t => t.Key == info.Token1).Value ?? 1m;

                BigDecimal pnlEth = -((amount0 * (BigDecimal)token0Price) + (amount1 * (BigDecimal)token1Price));
                return new CalculationResult<BigDecimal?>(pnlEth, null);
            }

            // If recipient is sender, PNL is 0 as no value was transferred out
            return new CalculationResult<BigDecimal?>(0, null);
        }
    }
}
```