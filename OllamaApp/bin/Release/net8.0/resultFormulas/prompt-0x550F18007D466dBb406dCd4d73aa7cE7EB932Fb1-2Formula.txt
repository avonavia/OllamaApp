```csharp
[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();
            var userAddress = info.FromAddress;
            var toAddress = info.ToAddress;

            foreach (var transfer in info.Transfers ?? Enumerable.Empty<TokenTransferInfo>())
            {
                if (!pnl.ContainsKey(userAddress)) pnl[userAddress] = BigDecimal.Zero;

                // Subtract the transferred amount from user's PNL as they sent tokens
                var tokenValueInEth = transfer.Amount * (tokenPrices?.FirstOrDefault(p => p.Key == transfer.TokenInfo.Symbol).Value ?? 0);
                pnl[userAddress] -= tokenValueInEth;

                // Add the transferred amount to recipient's PNL as they received tokens
                if (!pnl.ContainsKey(toAddress)) pnl[toAddress] = BigDecimal.Zero;
                pnl[toAddress] += tokenValueInEth;
            }

            // Subtract transaction fee from the user who initiated the transfer
            var feeInEth = info.Fee * (tokenPrices?.FirstOrDefault(p => p.Key == "ETH").Value ?? 0);
            if (pnl.ContainsKey(userAddress)) pnl[userAddress] -= feeInEth;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(
                pnl.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}
```