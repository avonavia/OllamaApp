//Method to calculate PNL for sync operation
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var pnlDictionary = new Dictionary<string, BigDecimal>();

        //If transaction has no transfers or less than 2 unique tokens, return empty result
        if (info.Transfers == null || info.GetDistinctTokens()?.Count() < 2)
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        var distinctTokens = info.GetDistinctTokens().ToList();
        if (distinctTokens == null || tokenPrices == null)
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        //Calculate PNL for each user address
        foreach (var address in info.FromAddresses.Union(info.ToAddresses).Distinct())
        {
            var pnl = new BigDecimal(0);

            //Loop through each token to calculate their PNL contribution
            foreach (var tokenInfo in distinctTokens)
            {
                var balanceChange = info.Transfers.Where(t => t.FromAddress == address && t.TokenInfo.Symbol == tokenInfo.Symbol).Sum(t => -t.Amount); // Subtract amount sent by user
                balanceChange += info.Transfers.Where(t => t.ToAddress == address && t.TokenInfo.Symbol == tokenInfo.Symbol).Sum(t => t.Amount); // Add amount received by user

                var price = tokenPrices.FirstOrDefault(p => p.Key == tokenInfo.Symbol).Value;
                if (price <= 0) continue; // If no price found, skip this token

                pnl += balanceChange * new BigDecimal((decimal)price); // Calculate PNL in Eth for the user
            }

            pnl -= info.FeeInEth; // Subtract transaction fee from user's total PNL
            pnlDictionary[address] = pnl; // Store PNL for this address
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary); // Return the final PNL dictionary for all addresses
    }