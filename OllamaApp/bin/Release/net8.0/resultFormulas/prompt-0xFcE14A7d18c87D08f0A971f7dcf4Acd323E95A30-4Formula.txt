```csharp
[assembly: FormulaAssembly("UniswapV2_PNL")]

namespace Sauron.Formula.UniswapV2
{
    public class UniswapV2Formula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlResult = new List<KeyValuePair<string, BigDecimal>>();
            var users = info.Transfers.Select(t => t.From).Concat(info.Transfers.Select(t => t.To)).Distinct().ToList();

            foreach (var user in users)
            {
                BigDecimal pnl = 0;

                // Calculate the PNL for each transfer related to the user
                foreach (var transfer in info.Transfers.Where(t => t.From == user || t.To == user))
                {
                    var tokenPrice = tokenPrices?.FirstOrDefault(p => p.Key == transfer.TokenAddress).Value ?? 0;
                    BigDecimal amountInEth = transfer.Amount * (BigDecimal)tokenPrice;

                    if (transfer.From == user)
                        // User sent tokens, so we subtract the amount in ETH and fee
                        pnl -= amountInEth + transfer.Fee;
                    else
                        // User received tokens, so we add the amount in ETH and subtract the fee (if any)
                        pnl += amountInEth - transfer.Fee;
                }

                pnlResult.Add(new KeyValuePair<string, BigDecimal>(user, pnl));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResult);
        }
    }
}
```