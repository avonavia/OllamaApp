[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.Transfers == null || !tokenPrices?.Any() ?? true)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>();

            var pnl = new List<KeyValuePair<string, BigDecimal>>();

            foreach (var transfer in info.Transfers)
            {
                if (!tokenPrices.Any(t => t.Key == transfer.TokenInfo.Symbol))
                    continue;

                var tokenPrice = tokenPrices.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value;
                pnl.Add(new KeyValuePair<string, BigDecimal>(transfer.ToAddress, transfer.Amount * (decimal)tokenPrice));
            }

            var userPNL = pnl.Where(p => p.Key == info.FromAddress || p.Key == info.ToAddress)
                .GroupBy(p => p.Key)
                .Select(g => new KeyValuePair<string, BigDecimal>(g.Key, g.Sum(p => p.Value)))
                .FirstOrDefault();

            if (userPNL.Equals(default))
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>();

            var fee = info.Fee ?? 0;
            userPNL = new KeyValuePair<string, BigDecimal>(userPNL.Key, userPNL.Value - (decimal)fee);

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new[] { userPNL });
        }
    }
}