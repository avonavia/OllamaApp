```csharp
using System;

// Assembly info for PNL calculation without messages for user
[assembly: AssemblyTitle("PNL Calculation")]
[assembly: AssemblyDescription("C# formula method for Solidity contract method")]

namespace PNLCalculation
{
    public class SwapCalculator
    {
        /// <summary>
        /// Calculate the Profit and Loss (PNL) for a swap transaction.
        /// </summary>
        /// <param name="amount0Out">The amount of token0 sent out.</param>
        /// <param name="amount1Out">The amount of token1 sent out.</param>
        /// <param name="reserve0">The reserve amount of token0 in the contract.</param>
        /// <param name="reserve1">The reserve amount of token1 in the contract.</param>
        /// <param name="balance0User">The user's balance of token0 before the swap.</param>
        /// <param name="balance1User">The user's balance of token1 before the swap.</param>
        /// <returns>The Profit and Loss (PNL) in Eth for the user. Positive if profit, negative if loss.</returns>
        public static decimal CalculatePNL(decimal amount0Out, decimal amount1Out, decimal reserve0, decimal reserve1, decimal balance0User, decimal balance1User)
        {
            // Calculate the user's balances after the swap.
            var balance0After = balance0User - amount0Out;
            var balance1After = balance1User - amount1Out;

            // Calculate the new reserve amounts in the contract.
            var reserve0After = reserve0 + amount0Out;
            var reserve1After = reserve1 + amount1Out;

            // Calculate the value of tokens the user has after the swap (in Eth).
            var value0After = balance0After * (reserve1After / reserve0After);
            var value1After = balance1After * (reserve0After / reserve1After);

            // Calculate the total value of tokens the user had before the swap (in Eth).
            var totalValueBefore = (balance0User * (reserve1 / reserve0)) + (balance1User * (reserve0 / reserve1));

            // Calculate the PNL.
            var pnl = value0After + value1After - totalValueBefore;

            return pnl;
        }
    }
}
```