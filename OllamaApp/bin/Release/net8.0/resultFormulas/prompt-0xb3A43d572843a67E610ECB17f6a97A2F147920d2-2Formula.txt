```csharp
[assembly: FormulaAssembly("SafeTransferPNL")]
namespace Sauron.Formula.SafeTransferPNL
{
    public class SafeTransferPNLFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlMap = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers)
            {
                // Check if the token transferred is the one specified in the Solidity method
                if (transfer.TokenInfo.Address == info.ToAddress)
                {
                    var fromAmount = Convert.ToDecimal(transfer.Amount);
                    var toAmount = transfer.ToAddress == info.FromAddress ? fromAmount - info.Fee : new BigDecimal(0); // Subtract fee if the user sends tokens back to themselves

                    var pnl = (toAmount * tokenPrices?.FirstOrDefault(p => p.Key == transfer.TokenInfo.Symbol).Value ?? 1) - (fromAmount * tokenPrices?.FirstOrDefault(p => p.Key == info.FeeTokenInfo.Symbol).Value ?? 1);

                    UpdatePNLMap(pnlMap, info.FromAddress, pnl);
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlMap.Any() ? pnlMap : null);
        }

        private void UpdatePNLMap(Dictionary<string, BigDecimal> map, string address, decimal value)
        {
            if (map.ContainsKey(address))
                map[address] += new BigDecimal(value);
            else
                map.Add(address, new BigDecimal(value));
        }
    }
}
```