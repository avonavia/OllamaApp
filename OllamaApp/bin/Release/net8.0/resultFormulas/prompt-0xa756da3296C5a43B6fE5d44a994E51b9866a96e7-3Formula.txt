// The following C# method performs multiplication of two BigDecimal numbers safely without causing an overflow.

namespace Sauron.Formula
{
    public class SafeMultiplication
    {
        public static CalculationResult<BigDecimal> Multiply(BigDecimal a, BigDecimal b)
        {
            if (a == 0)
                return new CalculationResult<BigDecimal>(0);

            try
            {
                var c = a * b;
                // Check for overflow by dividing the result back by one of the inputs.
                var checkValue = c / a;
                if (checkValue == b)
                    return new CalculationResult<BigDecimal>(c);
            }
            catch (OverflowException)
            {
                // Handle overflow exception here, such as returning an error message or throwing a custom exception.
            }

            // If the multiplication overflows or fails the check, return an error or handle it appropriately.
            return new CalculationResult<BigDecimal>(null);
        }
    }
}