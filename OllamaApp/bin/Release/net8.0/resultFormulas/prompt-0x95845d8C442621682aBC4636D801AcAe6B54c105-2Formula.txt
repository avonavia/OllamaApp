// Assembly name should be exactly as function name in Solidity contract
[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        /// <summary>
        /// Calculates the PNL for a transaction involving SafeTransfer method in Solidity contract.
        /// </summary>
        /// <param name="info">The transaction info.</param>
        /// <param name="tokenPrices">Optional token prices.</param>
        /// <returns>A calculation result with address-PNL pairs or null.</returns>
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();

            foreach (var transfer in GetTransfersWithAmounts(info.Transfers))
            {
                if (!pnl.ContainsKey(transfer.Key.FromAddress))
                    pnl[transfer.Key.FromAddress] = BigDecimal.Zero;

                if (!pnl.ContainsKey(transfer.Key.ToAddress))
                    pnl[transfer.Key.ToAddress] = BigDecimal.Zero;

                // Subtract the amount sent from sender's PNL
                pnl[transfer.Key.FromAddress] -= transfer.Value;

                // Add the amount received to recipient's PNL
                pnl[transfer.Key.ToAddress] += transfer.Value;
            }

            // Subtract fee from sender's PNL if it's not a self-transaction
            if (!string.IsNullOrEmpty(info.FromAddress) && !string.IsNullOrEmpty(info.ToAddress) && info.FromAddress != info.ToAddress)
                pnl[info.FromAddress] -= new BigDecimal(info.Fee);

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnl.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }

        /// <summary>
        /// Gets token transfers with their amounts from the given list of transfers.
        /// </summary>
        /// <param name="transfers">The list of transfers.</param>
        /// <returns>An enumerable of key-value pairs representing token info and its amount.</returns>
        private IEnumerable<KeyValuePair<TokenInfo, BigDecimal>> GetTransfersWithAmounts(List<TokenTransferInfo> transfers)
        {
            foreach (var transfer in transfers)
                yield return new KeyValuePair<TokenInfo, BigDecimal>(transfer.TokenInfo, transfer.Amount);
        }
    }
}