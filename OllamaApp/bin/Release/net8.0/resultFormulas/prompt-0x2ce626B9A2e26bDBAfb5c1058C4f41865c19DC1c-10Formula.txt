[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var token0 = info.GetDistinctTokens().FirstOrDefault(t => t.Symbol == "token0"); // Assuming 'symbol' is a property in TokenInfo class
            var token1 = info.GetDistinctTokens().FirstOrDefault(t => t.Symbol == "token1");

            if (token0 == null || token1 == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.CreateError("One or both tokens are not present in the transaction.");

            var balanceToken0 = info.Transfers?.Where(t => t.TokenInfo.Symbol == "token0").Sum(t => t.Amount) ?? 0;
            var balanceToken1 = info.Transfers?.Where(t => t.TokenInfo.Symbol == "token1").Sum(t => t.Amount) ?? 0;

            var reserve0 = (BigDecimal)info.Reserve0; // Assuming Reserve0 is a property in TransactionInfo class
            var reserve1 = (BigDecimal)info.Reserve1; // Assuming Reserve1 is a property in TransactionInfo class

            var pnlToken0 = balanceToken0 * ((reserve1 / reserve0) - 1);
            var pnlToken1 = balanceToken1 * ((reserve0 / reserve1) - 1);

            var totalPnl = pnlToken0 + pnlToken1; // Assuming token prices are not needed for this calculation

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.CreateSuccess(new[] { new KeyValuePair<string, BigDecimal>(info.ToAddress, totalPnl) });
        }
    }
}