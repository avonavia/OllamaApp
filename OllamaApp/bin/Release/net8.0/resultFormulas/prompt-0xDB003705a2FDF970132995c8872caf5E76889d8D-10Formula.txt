//Solidity function to calculate token balances for Uniswap V2 pair contract

using Nethereum.ABI.Model;
using Sauron.Core.Formula;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;

namespace Sauron.Formula.UniswapV2Sync
{
    public class UniswapV2Sync : IFormulaPlugin
    {
        //The formula calculates changes in reserves for tokens0 and token1 of a Uniswap V2 pair contract
        //This is done by comparing the current balances of tokens0 and tokens1 with the existing reserves
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Get token balances for this contract address from transfers object in TransactionInfo
            var token0Balance = info.Transfers?.FirstOrDefault(t => t.ToAddress == info.Address && t.TokenInfo.Symbol == "token0")?.Amount;
            var token1Balance = info.Transfers?.FirstOrDefault(t => t.ToAddress == info.Address && t.TokenInfo.Symbol == "token1")?.Amount;

            //Get existing reserves for tokens0 and tokens1 from logs object in TransactionInfo
            var logEvent = info.Logs?.FirstOrDefault(l => l.Topics?[0] == new Topic("Sync(uint112,uint112)"));
            if (logEvent != null)
            {
                BigInteger reserve0 = logEvent.Data?.Substring(2, 32).HexToBigInteger() ?? 0;
                BigInteger reserve1 = logEvent.Data?.Substring(34, 32).HexToBigInteger() ?? 0;

                //Calculate changes in reserves
                var token0Change = (token0Balance != null && reserve0 > 0) ? new BigDecimal((decimal)((token0Balance - reserve0) / reserve0)) : BigDecimal.Zero;
                var token1Change = (token1Balance != null && reserve1 > 0) ? new BigDecimal((decimal)((token1Balance - reserve1) / reserve1)) : BigDecimal.Zero;

                //Return changes in reserves for tokens0 and tokens1 as PNL
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(new List<KeyValuePair<string, BigDecimal>>()
                {
                    new KeyValuePair<string, BigDecimal>("token0", token0Change),
                    new KeyValuePair<string, BigDecimal>("token1", token1Change)
                });
            }
            else
            {
                //Return null if there are no logs about reserve changes in TransactionInfo
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(null);
            }
        }
    }
}