// C# Formula method for Solidity contract method "_spendAllowance"

    using Sauron.Formula.Common;
    using System.Linq;
    using Nethereum.Util;

    namespace Sauron.Formula.SpendAllowance
    {
        public class SpendAllowanceFormula : IFormulaPlugin
        {
            public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
                IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
            {
                var owner = info.FromAddress;
                var spender = info.ToAddress;
                var value = (BigDecimal)info.Transfers?.FirstOrDefault()?.Amount ?? BigDecimal.Zero;

                // Get the current allowance for the owner and spender
                var currentAllowance = info.TokenInfo?.GetAllowance(owner, spender);

                if (currentAllowance != null && currentAllowance < value)
                    return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null, "ERC20InsufficientAllowance");

                // Subtract the value from the current allowance and update it
                if (currentAllowance != null)
                {
                    var newAllowance = currentAllowance - value;
                    info.TokenInfo?.SetAllowance(owner, spender, newAllowance);
                }

                // Calculate PNL for the owner
                var pnl = new List<KeyValuePair<string, BigDecimal>>();
                if (tokenPrices != null)
                {
                    var price = tokenPrices.FirstOrDefault(p => p.Key == info.TokenInfo?.Symbol).Value;
                    if (price > decimal.Zero)
                        pnl.Add(new KeyValuePair<string, BigDecimal>(owner, value * (BigDecimal)price));
                }

                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);
            }
        }
    }