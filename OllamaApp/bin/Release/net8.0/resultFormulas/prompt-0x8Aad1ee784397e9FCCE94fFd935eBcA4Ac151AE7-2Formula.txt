```csharp
[assembly: FormulaAssembly("UNISWAP_V2_TRANSFER")]

namespace Sauron.Formula.UNISWAPV2Transfer
{
    public class UNISWAPV2TransferFormula : IFormulaPlugin
    {
        // PNL is calculated for user addresses, not tokens. So we only need to handle the case when the token is transferred from or to the user address.
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var userAddresses = new HashSet<string>(info.FromAddress, info.ToAddress); // User addresses in the transaction
            var pnlResult = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers)
            {
                if (userAddresses.Contains(transfer.FromAddress))
                {
                    // If user sent tokens, decrease his PNL by the value of tokens and fee (if applicable)
                    if (!pnlResult.ContainsKey(transfer.FromAddress))
                        pnlResult[transfer.FromAddress] = BigDecimal.Zero;
                    pnlResult[transfer.FromAddress] -= transfer.Amount * new BigDecimal((decimal)tokenPrices?.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value ?? 0);
                }

                if (userAddresses.Contains(transfer.ToAddress))
                {
                    // If user received tokens, increase his PNL by the value of tokens
                    if (!pnlResult.ContainsKey(transfer.ToAddress))
                        pnlResult[transfer.ToAddress] = BigDecimal.Zero;
                    pnlResult[transfer.ToAddress] += transfer.Amount * new BigDecimal((decimal)tokenPrices?.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value ?? 0);
                }
            }

            // Subtract fee from the user's PNL (if applicable and if it was not already subtracted)
            if (info.FromAddress != info.ToAddress && userAddresses.Contains(info.FromAddress))
            {
                pnlResult[info.FromAddress] -= info.Fee;
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.SuccessWithResult(pnlResult);
        }
    }
}
```