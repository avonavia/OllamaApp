//Assembly name must be EXACTLY as function name in Solidity contract (even if it starts with a lowercase letter)
   [assembly: FormulaAssembly("delBots")]

namespace Sauron.Formula.delBots
{
    public class delBotsFormula : IFormulaPlugin
    {
        //Formula signature will ALWAYS be the same
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Check if the transaction is from an owner
            if (!info.IsFromOwner())
            {
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
                    (null, "The transaction was not initiated by the owner.");
            }

            //Get addresses to be removed from bots
            var notbot = info.DecodeMethodInputAsAddressList();

            //Since this operation does not involve any token transactions or fee calculation, return null for PNL
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
                (null, $"Removed {notbot.Count} addresses from bots.");
        }
    }
}

//Note:
//This formula assumes that the TransactionInfo object has a method called IsFromOwner() to check if the transaction is initiated by an owner and a method called DecodeMethodInputAsAddressList() to decode the input data as an address list. These methods are not shown in this code snippet, but they should be implemented according to the actual environment where this formula will run.