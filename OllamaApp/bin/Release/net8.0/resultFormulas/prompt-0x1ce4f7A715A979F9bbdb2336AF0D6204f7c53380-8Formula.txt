Here's the equivalent C# formula method for the given Solidity contract method:

```csharp
using System;

public class PNLCalculation
{
    // assembly info (IMPORTANT) for PNL calculation without messages for user
    [assembly: System.Reflection.AssemblyTitle("PNL Calculation")]
    [assembly: System.Reflection.AssemblyDescription("A library for calculating profit and loss in UniswapV2 swaps.")]

    // PNL is calculated for user addresses, not tokens
    public decimal CalculatePNL(decimal reserve0, decimal reserve1, decimal amount0Out, decimal amount1Out, decimal feePercentage)
    {
        // calculate the initial value of reserves
        decimal initialReserveValue = reserve0 * reserve1;

        // calculate the new value of reserves after swap
        decimal newReserve0 = reserve0 - amount0Out;
        decimal newReserve1 = reserve1 - amount1Out;
        decimal newReserveValue = newReserve0 * newReserve1;

        // calculate fee for the swap
        decimal feeAmount = (initialReserveValue - newReserveValue) * feePercentage / 100;

        // calculate PNL, subtracting the fee
        decimal pnl = amount0Out + amount1Out - feeAmount;

        return pnl;
    }
}
```

This C# code calculates the profit and loss (PNL) for a user in a UniswapV2 swap. The method takes as input the initial reserves of tokens, the amounts of each token swapped out, and the fee percentage. It calculates the value of the reserves before and after the swap, computes the fee amount, and then determines the PNL by subtracting the fee from the total amount swapped out. The method returns this PNL as a decimal number, which is assumed to be in Ether (Eth) as per the rules provided.