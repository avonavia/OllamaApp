```csharp
// Assembly information for PNL calculation without messages for user
[assembly: System.Reflection.AssemblyTitle("Burn Formula")]

namespace Sauron.Formula.UniSwapV2Burn
{
    public class BurnFormula : IFormulaPlugin
    {
        public CalculationResult<BigDecimal?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the necessary values from TransactionInfo object
            var reserve0 = info.Reserve0;
            var reserve1 = info.Reserve1;
            var balance0 = info.Balance0;
            var balance1 = info.Balance1;
            var liquidity = info.Liquidity;
            var totalSupply = info.TotalSupply;

            // Calculate the amount of tokens burned
            var amount0 = BigDecimal.Multiply(liquidity, balance0) / totalSupply;
            var amount1 = BigDecimal.Multiply(liquidity, balance1) / totalSupply;

            // Calculate the value of tokens in Eth
            var priceOfToken0 = tokenPrices?.FirstOrDefault(x => x.Key == info.Token0).Value ?? 0m;
            var priceOfToken1 = tokenPrices?.FirstOrDefault(x => x.Key == info.Token1).Value ?? 0m;

            var valueOfTokensBurned = (amount0 * new BigDecimal((decimal)priceOfToken0)) + (amount1 * new BigDecimal((decimal)priceOfToken1));

            // Check if the user sent tokens to themselves or not
            var isSameAddress = info.FromAddress == info.ToAddress;

            // Calculate PNL
            var pnl = isSameAddress ? BigDecimal.Zero : -valueOfTokensBurned;

            return new CalculationResult<BigDecimal?> { Result = pnl };
        }
    }
}
```