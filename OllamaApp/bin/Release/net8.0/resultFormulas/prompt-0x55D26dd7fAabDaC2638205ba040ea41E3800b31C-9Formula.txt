```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();
            var pnl = BigDecimal.Zero;

            if (info.Transfers != null && tokenPrices != null)
            {
                foreach (var transfer in info.Transfers)
                {
                    // Check if the transaction is a skim operation (sending tokens to 'to' address)
                    if (transfer.ToAddress == info.InputArguments[0].ToString())
                    {
                        var tokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value;
                        if (tokenPrice > 0) // Token price is known
                        {
                            var amountInEth = new BigDecimal(transfer.Amount * (decimal)tokenPrice);
                            pnl -= amountInEth; // Subtract the skimmed tokens from PNL
                        }
                    }
                }
            }

            result[info.FromAddress] = pnl; // User's address is used as a key
            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}
```