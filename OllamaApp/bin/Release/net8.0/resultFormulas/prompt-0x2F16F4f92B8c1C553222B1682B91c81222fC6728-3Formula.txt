//Method to calculate PNL for transfer method
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        // Check if the transaction has any transfers and prices are provided
        if (info.Transfers == null || !info.Transfers.Any() || tokenPrices == null || !tokenPrices.Any())
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        // Get the token and its price
        var token = info.Transfers.First().TokenInfo;
        var price = tokenPrices.FirstOrDefault(p => p.Key == token.Symbol).Value;

        // If token or its price is not found, return null
        if (price <= 0)
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        var pnl = BigDecimal.Zero;

        // Loop through all transfers
        foreach (var transfer in info.Transfers)
        {
            // If the recipient is not the same as sender, calculate PNL
            if (!string.Equals(info.ToAddress, transfer.ToAddress, StringComparison.OrdinalIgnoreCase))
                pnl -= BigDecimal.Parse(transfer.Amount.ToString()) * price;
        }

        // Calculate fee in Eth
        var feeInEth = info.Fee / (10m).Power(18);
        pnl -= feeInEth;

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new List<KeyValuePair<string, BigDecimal>>() { new KeyValuePair<string, BigDecimal>(info.FromAddress, pnl) });
    }