//Formula Assembly attribute must match exactly with function name in Solidity contract, even if it starts with a lowercase letter
[assembly: FormulaAssembly("getReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        //CalculationResult must always be CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>, having Address-PNL pairs in it or NULL
        //Token prices are not used in this formula as we're not calculating any PNL for addresses here.
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Assuming that the reserves and blockTimestampLast are stored in TransactionInfo's properties with same names.
            var reserve0 = (BigDecimal)info.Reserve0;
            var reserve1 = (BigDecimal)info.Reserve1;
            var blockTimestampLast = info.BlockTimestampLast;

            //Returning the reserves and last block timestamp in a KeyValuePair format to match Solidity return type.
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            {
                Result = new List<KeyValuePair<string, BigDecimal>>()
                {
                    new KeyValuePair<string, BigDecimal>("_reserve0", reserve0),
                    new KeyValuePair<string, BigDecimal>("_reserve1", reserve1),
                    new KeyValuePair<string, BigDecimal>("_blockTimestampLast", (BigDecimal)blockTimestampLast)
                }
            };
        }
    }
}