[assembly: FormulaAssembly("_transfer")]

namespace Sauron.Formula._transfer

public class _transferFormula : IFormulaPlugin
{
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        // Check if there are transfers in the transaction
        if (info.Transfers == null || !info.Transfers.Any())
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        var pnl = new Dictionary<string, BigDecimal>();

        // Iterate over all transfers in the transaction
        foreach (var transfer in info.Transfers)
        {
            // Subtract the transferred value from the sender's balance
            if (!pnl.ContainsKey(transfer.FromAddress))
                pnl[transfer.FromAddress] = BigDecimal.Zero;
            pnl[transfer.FromAddress] -= transfer.Amount;

            // Add the transferred value to the receiver's balance
            if (!pnl.ContainsKey(transfer.ToAddress))
                pnl[transfer.ToAddress] = BigDecimal.Zero;
            pnl[transfer.ToAddress] += transfer.Amount;
        }

        // Subtract the fee from the sender's balance
        if (info.Fee != null && info.FromAddress != null && pnl.ContainsKey(info.FromAddress))
            pnl[info.FromAddress] -= info.Fee.Value;

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);
    }
}