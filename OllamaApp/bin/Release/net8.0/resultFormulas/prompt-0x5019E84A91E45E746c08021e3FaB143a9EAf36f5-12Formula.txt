// C# Formula method for the Solidity contract method swapTokensForEth

using Sauron.Core.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Nethereum.Util;

namespace Sauron.Formula.SwapTokensForEth
{
    public class SwapTokensForEthFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlResults = new List<KeyValuePair<string, BigDecimal>>();

            // Get the transfer of tokens for this swap transaction
            var tokenTransfer = info.Transfers?.FirstOrDefault(t => t.ToAddress == info.UniswapV2RouterAddress);

            if (tokenTransfer != null)
            {
                // Calculate the amount of ETH received after the swap
                var ethReceived = CalculateEthReceivedFromSwap(tokenTransfer.Amount, tokenPrices);

                // Subtract the fee from the ETH received to get the net gain in ETH
                var netGainInEth = ethReceived - info.Fee;

                // Add the PNL for the user's address
                pnlResults.Add(new KeyValuePair<string, BigDecimal>(info.FromAddress, new BigDecimal(netGainInEth)));
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Successful(pnlResults);
        }

        private decimal CalculateEthReceivedFromSwap(BigDecimal tokenAmount, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices)
        {
            // Assuming that the token used in the swap is a Uniswap V2 token and we have its price
            var tokenPrice = tokenPrices?.FirstOrDefault(p => p.Key == tokenTransfer.TokenInfo.Symbol).Value;

            if (tokenPrice != null)
            {
                // Calculate the amount of ETH received from the swap using the Uniswap V2 formula
                var ethReceived = tokenAmount * tokenPrice / new BigDecimal(Math.Pow(10, tokenTransfer.TokenInfo.Decimals));
                return (decimal)ethReceived;
            }

            // If we don't have the price for the token used in the swap, we can't calculate the ETH received
            throw new InvalidOperationException("Cannot calculate ETH received from swap: unknown token price");
        }
    }
}