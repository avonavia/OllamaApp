[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            // Get unique tokens from transfers
            var tokens = info.GetDistinctTokens();

            if (tokens == null || !tokens.Any())
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.FromError("No token transfers found.");

            foreach (var token in tokens)
            {
                var tokenTransfers = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol);

                if (tokenTransfers == null || !tokenTransfers.Any())
                    continue;

                // Calculate total input and output for each token
                BigDecimal totalInput = 0;
                BigDecimal totalOutput = 0;

                foreach (var transfer in tokenTransfers)
                {
                    if (transfer.FromAddress == info.ToAddress)
                        totalInput += transfer.Amount;
                    else if (transfer.ToAddress == info.ToAddress)
                        totalOutput += transfer.Amount;
                }

                // Calculate PNL for this token
                var pnl = totalOutput - totalInput;

                // Convert PNL to Eth based on the provided prices if available
                if (tokenPrices != null)
                {
                    var price = tokenPrices.FirstOrDefault(p => p.Key == token.Symbol).Value;

                    if (price > 0)
                        pnl *= new BigDecimal((decimal)price);
                }

                result[token.Symbol] = pnl;
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.FromSuccess(result);
        }
    }
}