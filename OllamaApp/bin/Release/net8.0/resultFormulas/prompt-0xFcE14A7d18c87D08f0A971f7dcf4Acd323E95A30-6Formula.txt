```csharp
// Assembly info for PNL calculation
[assembly: FormulaAssembly("Mint")]

namespace Sauron.Formula.Mint
{
    public class MintFormula : IFormulaPlugin
    {
        // Calculate PNL for the given transaction
        public CalculationResult<BigDecimal?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.FromAddress == info.ToAddress && info.TokenAmountsOut != null && info.TokenAmountsIn != null)
                return new CalculationResult<BigDecimal?>((BigDecimal)(-info.Fee)); // If user sends tokens to themselves, PNL is negative Fee
            else if (info.TokenAmountsOut?.Count() > 0 && info.TokenAmountsIn?.Any(t => t.Key == "LIQUIDITY") == true)
                return new CalculationResult<BigDecimal?>((BigDecimal)(-info.TokenAmountsOut.First().Value)); // PNL is negative amount of tokens minted
            else
                return null; // No PNL change in other cases
        }
    }
}
```