[assembly: FormulaAssembly("_update")]

using System;
using System.Collections.Generic;
using System.Numerics;
using Sauron.FormulaInterface;

namespace Sauron.Formula._update
{
    public class _updateFormula : IFormulaPlugin
    {
        // This method calculates the Profit and Loss (PNL) for a given transaction based on the UniswapV2 protocol.
        // It assumes that the provided TransactionInfo object is correctly decoded, containing the required data for calculation.
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Extracting relevant transaction information
            var fromAddress = info.From;
            var toAddress = info.To;
            var balance0 = info.Amount0In;
            var balance1 = info.Amount1In;
            var reserve0 = new BigInteger(info.Reserve0);
            var reserve1 = new BigInteger(info.Reserve1);

            // Checking for overflow in the input values
            if (balance0 > uint.MaxValue || balance1 > uint.MaxValue)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("Overflow detected.");

            // Calculating time elapsed since last block timestamp
            var blockTimestamp = (uint)(DateTimeOffset.Now.ToUnixTimeSeconds() % uint.MaxValue);
            var timeElapsed = blockTimestamp - info.BlockTimestampLast;

            BigDecimal pnl = 0;
            if (timeElapsed > 0 && reserve0 != 0 && reserve1 != 0)
            {
                // Calculating cumulative prices based on UniswapV2 formula
                var price0CumulativeLast = new BigDecimal(info.Price0CumulativeLast);
                var price1CumulativeLast = new BigDecimal(info.Price1CumulativeLast);

                var newPrice0CumulativeLast = price0CumulativeLast + ((BigDecimal)reserve1 / (BigDecimal)reserve0) * timeElapsed;
                var newPrice1CumulativeLast = price1CumulativeLast + ((BigDecimal)reserve0 / (BigDecimal)reserve1) * timeElapsed;

                // Calculating PNL based on the difference in cumulative prices and transaction amounts
                pnl += (newPrice1CumulativeLast - price1CumulativeLast) * balance0;
                pnl -= (newPrice0CumulativeLast - price0CumulativeLast) * balance1;
            }

            // Subtracting the transaction fee from PNL
            pnl -= info.Fee;

            // Preparing the result to be returned
            var result = new List<KeyValuePair<string, BigDecimal>>
            {
                new KeyValuePair<string, BigDecimal>(fromAddress, -pnl),
                new KeyValuePair<string, BigDecimal>(toAddress, pnl)
            };

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}