//Method to calculate PNL for _safeTransfer in Solidity contract in C#

[assembly: FormulaAssembly("_safeTransfer")]

namespace Sauron.Formula._safeTransfer

public class _safeTransferFormula : IFormulaPlugin
{
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var pnlResults = new Dictionary<string, BigDecimal>();

        //Check if transfers object is not null and contains any items
        if (info.Transfers != null && info.Transfers.Any())
        {
            foreach (var transfer in info.Transfers)
            {
                var tokenSymbol = transfer.TokenInfo.Symbol;
                var toAddress = transfer.To;
                var amount = transfer.Amount;

                //If user sent tokens to themselves, no PNL is calculated
                if (info.From != toAddress)
                {
                    var tokenPrice = tokenPrices?.FirstOrDefault(t => t.Key == tokenSymbol).Value ?? 0;
                    var pnl = amount * (decimal)tokenPrice - info.Fee;

                    //If user address does not exist in dictionary, add it with initial PNL value
                    if (!pnlResults.ContainsKey(info.From))
                        pnlResults[info.From] = new BigDecimal(pnl);
                    else
                        pnlResults[info.From] += new BigDecimal(pnl); //Otherwise, update existing value
                }
            }
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults.Select(x => new KeyValuePair<string, BigDecimal>(x.Key, x.Value)));
    }
}