// Assembly information, same as function name in Solidity contract
[assembly: FormulaAssembly("GetReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        /// <summary>
        /// Calculates the reserves for a given transaction info
        /// </summary>
        /// <param name="info">Transaction information</param>
        /// <param name="tokenPrices">Token prices</param>
        /// <returns>A calculation result containing reserve0, reserve1 and blockTimestampLast or NULL if not applicable</returns>
        public CalculationResult<(BigDecimal Reserve0, BigDecimal Reserve1, uint BlockTimestampLast)> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Check if transaction info is valid and contains required data
            if (info == null || info.Reserve0 == null || info.Reserve1 == null || info.BlockTimestampLast == null)
                return CalculationResult<(BigDecimal Reserve0, BigDecimal Reserve1, uint BlockTimestampLast)>
                    .Fail("Invalid transaction information or missing required data");

            // Return the reserves and block timestamp last
            return CalculationResult<(BigDecimal Reserve0, BigDecimal Reserve1, uint BlockTimestampLast)>.Success((info.Reserve0, info.Reserve1, (uint)info.BlockTimestampLast));
        }
    }
}