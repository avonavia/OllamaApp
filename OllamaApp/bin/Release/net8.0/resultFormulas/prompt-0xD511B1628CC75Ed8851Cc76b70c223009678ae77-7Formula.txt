//Method to calculate PNL for _transfer method of Solidity contract

namespace Sauron.Formula._Transfer

public class _TransferFormula : IFormulaPlugin
{
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        //Getting distinct user addresses from transaction
        var addresses = info.Transfers?.Select(t => t.From).Distinct() ?? Enumerable.Empty<string>();

        var results = new List<KeyValuePair<string, BigDecimal>>();

        foreach (var address in addresses)
        {
            //Getting all transfers related to the current address
            var userTransfers = info.Transfers?.Where(t => t.From == address || t.To == address);

            if (userTransfers != null)
            {
                BigDecimal pnl = 0;

                foreach (var transfer in userTransfers)
                {
                    //Subtracting amount from PNL if the user is the sender, adding otherwise
                    pnl -= (transfer.From == address) ? transfer.Amount : 0;
                    pnl += (transfer.To == address) ? transfer.Amount : 0;
                }

                //Subtracting fee from PNL if it is not a self-transaction
                if (!userTransfers.Any(t => t.From == t.To))
                {
                    pnl -= info.Fee;
                }

                results.Add(new KeyValuePair<string, BigDecimal>(address, pnl));
            }
        }

        return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.SuccessWith(results);
    }
}