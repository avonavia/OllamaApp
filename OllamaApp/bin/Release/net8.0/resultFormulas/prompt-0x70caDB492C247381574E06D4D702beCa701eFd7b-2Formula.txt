[assembly: FormulaAssembly("SafeTransfer")]

using Sauron.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using Nethereum.Util;

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        private const string TransferSelector = "0xa9059cbb"; // ERC20 transfer method selector

        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info == null || !info.Transfers.Any() || tokenPrices == null)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>((IEnumerable<KeyValuePair<string, BigDecimal>>?)null);

            var distinctTokens = GetDistinctTokens(info);
            var pnlByAddress = new Dictionary<string, BigDecimal>();

            foreach (var token in distinctTokens)
            {
                var transfersForToken = info.Transfers.Where(t => t.TokenInfo.Symbol == token.Symbol).ToList();
                var tokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == token.Symbol).Value;

                foreach (var transfer in transfersForToken)
                {
                    if (!pnlByAddress.ContainsKey(transfer.From))
                        pnlByAddress[transfer.From] = BigDecimal.Zero;

                    if (!pnlByAddress.ContainsKey(transfer.To))
                        pnlByAddress[transfer.To] = BigDecimal.Zero;

                    var amountInEth = (BigDecimal)tokenPrice * transfer.Amount;

                    // Subtract the transferred amount from the sender's PNL and add it to the recipient's PNL
                    pnlByAddress[transfer.From] -= amountInEth;
                    pnlByAddress[transfer.To] += amountInEth;
                }
            }

            // Subtract the fee from the sender's PNL
            if (info.Fee > BigDecimal.Zero && !string.IsNullOrEmpty(info.From))
                pnlByAddress[info.From] -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlByAddress);
        }
    }
}