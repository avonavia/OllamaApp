[assembly: FormulaAssembly("_mintFee")]

namespace Sauron.Formula._mintFee
{
    public class _mintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Calculate the PNL for minting fees in UniswapV2 contract
            var feeTo = info.FeeTo; // Assuming FeeTo is already decoded and available in TransactionInfo object
            if (feeTo == "0x0") return null; // No fee to be collected, so no PNL for users

            BigDecimal reserve0 = info.Reserve0;
            BigDecimal reserve1 = info.Reserve1;
            BigDecimal totalSupply = info.TotalSupply;
            BigDecimal kLast = info.KLast;

            if (kLast != 0)
            {
                BigDecimal rootK = BigDecimal.Sqrt(reserve0 * reserve1);
                BigDecimal rootKLast = BigDecimal.Sqrt(kLast);

                if (rootK > rootKLast)
                {
                    BigDecimal numerator = totalSupply * (rootK - rootKLast);
                    BigDecimal denominator = (rootK * 5) + rootKLast;
                    BigDecimal liquidity = numerator / denominator;

                    if (liquidity > 0)
                    {
                        // Calculate PNL for users by subtracting the fee from their transactions
                        var pnl = new Dictionary<string, BigDecimal>
                        {
                            { info.FromAddress, -(info.Fee * liquidity / totalSupply) },
                            { feeTo, info.Fee * liquidity / totalSupply } // Fee is received by the feeTo address
                        };

                        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);
                    }
                }
            }

            return null; // No PNL for users if no liquidity was minted
        }
    }
}