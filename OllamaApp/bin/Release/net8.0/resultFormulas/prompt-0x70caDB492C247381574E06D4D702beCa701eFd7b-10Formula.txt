[assembly: FormulaAssembly("SyncPNL")]

namespace Sauron.Formula.SyncPNL
{
    public class SyncPNLFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get distinct tokens in transaction
            var tokens = info.GetDistinctTokens();
            if (tokens == null) return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Empty;

            // Initialize PNL for each address
            var pnl = new Dictionary<string, BigDecimal>();

            foreach (var token in tokens)
            {
                // Get transfers for current token
                var transfers = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol);
                if (transfers == null) continue;

                // Calculate PNL for each transfer
                foreach (var transfer in transfers)
                {
                    var price = tokenPrices?.FirstOrDefault(p => p.Key == token.Symbol).Value ?? 0M;

                    if (!pnl.ContainsKey(transfer.From))
                        pnl[transfer.From] = BigDecimal.Zero;

                    if (!pnl.ContainsKey(transfer.To))
                        pnl[transfer.To] = BigDecimal.Zero;

                    // If the transfer is from contract to user, add amount * price to PNL
                    if (info.From == token.Address)
                        pnl[transfer.To] += transfer.Amount * new BigDecimal(price);

                    // If the transfer is from user to contract, subtract amount * price from PNL
                    else if (info.To == token.Address)
                        pnl[transfer.From] -= transfer.Amount * new BigDecimal(price);
                }
            }

            // Subtract fee from sender's PNL
            if (pnl.ContainsKey(info.From))
                pnl[info.From] -= info.Fee;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(pnl);
        }
    }
}