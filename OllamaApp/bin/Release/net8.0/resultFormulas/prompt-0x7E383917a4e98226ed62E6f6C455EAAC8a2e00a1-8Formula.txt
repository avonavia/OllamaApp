```csharp
using System;
// Assembly info for PNL calculation formula
[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
namespace CalculationFormula
{
    public class PNLCalculator
    {
        // Method for calculating the Profit and Loss (PNL)
        public static decimal CalculatePNL(decimal amount0Out, decimal amount1Out, decimal reserve0, decimal reserve1, decimal feePercentage, bool isSelfTransfer)
        {
            // Check if amounts are valid
            if (!(amount0Out > 0 || amount1Out > 0))
                throw new ArgumentException("Insufficient output amount");

            // Check if there is sufficient liquidity
            if (!(amount0Out < reserve0 && amount1Out < reserve1))
                throw new ArgumentException("Insufficient liquidity");

            // Calculate the fees for each token
            decimal fee0 = amount0Out * (feePercentage / 100);
            decimal fee1 = amount1Out * (feePercentage / 100);

            // Adjust the amounts based on fees and self-transfer
            decimal adjustedAmount0Out = isSelfTransfer ? amount0Out : amount0Out - fee0;
            decimal adjustedAmount1Out = isSelfTransfer ? amount1Out : amount1Out - fee1;

            // Calculate the PNL
            decimal pnl = (adjustedAmount0Out / reserve0) + (adjustedAmount1Out / reserve1);

            return pnl;
        }
    }
}
```