```csharp
using Sauron.Formula.ManualSwap;
using Nethereum.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Sauron.Models.CoinGecko;
using Sauron.Models.TransactionInfo;

[assembly: FormulaAssembly("ManualSwap")]

namespace Sauron.Formula.ManualSwap
{
    public class ManualSwapFormula : IFormulaPlugin
    {
        // CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> is a dictionary with Address-PNL pairs or NULL if no PNL is calculated
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Check if the sender address is equal to _taxWallet
            if (info.FromAddress != info.TaxWalletAddress)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> { ErrorMessage = "Sender address is not equal to _taxWallet" };

            // Create a dictionary with Address-PNL pairs
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            if (tokenPrices == null || !tokenPrices.Any())
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> { ErrorMessage = "No token prices provided" };

            // Calculate PNL for each transfer
            foreach (var transfer in info.Transfers)
            {
                if (transfer.FromAddress == transfer.ToAddress)
                    continue; // Skip if the transaction is sent to itself

                var tokenPrice = tokenPrices.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value;

                if (tokenPrice <= 0)
                    continue; // Skip if the token price is not available or zero

                // Convert token amount to Eth and add it to PNL
                var ethAmount = new BigDecimal(UnitConversion.Convert.FromWei((BigInteger)transfer.Amount, transfer.TokenInfo.Decimals));
                pnlDictionary[info.TaxWalletAddress] -= ethAmount * new BigDecimal(tokenPrice);
            }

            // Subtract Fee from PNL in Eth
            var feeInEth = new BigDecimal(UnitConversion.Convert.FromWei((BigInteger)info.Fee, info.FeeTokenInfo.Decimals));
            pnlDictionary[info.TaxWalletAddress] -= feeInEth;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> { Result = pnlDictionary };
        }
    }
}
```