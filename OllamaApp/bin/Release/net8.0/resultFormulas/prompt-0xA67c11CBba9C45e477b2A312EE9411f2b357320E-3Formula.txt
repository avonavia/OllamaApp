//Method to calculate PNL for transfer operation
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var sender = info.FromAddress; //Sender's address
        var recipient = info.Transfers[0].ToAddress; //Recipient's address
        var amount = info.Transfers[0].Amount; //Transfered amount

        //Creating a dictionary to store the PNL for each user (address is the key)
        var pnlDictionary = new Dictionary<string, BigDecimal>();

        //If sender and recipient are not the same, PNL calculation is simple
        if(sender != recipient)
        {
            //Decrease the amount from sender's balance and update PNL
            if (pnlDictionary.ContainsKey(sender))
                pnlDictionary[sender] -= amount;
            else
                pnlDictionary[sender] = -amount;

            //Increase the amount to recipient's balance and update PNL
            if (pnlDictionary.ContainsKey(recipient))
                pnlDictionary[recipient] += amount;
            else
                pnlDictionary[recipient] = amount;
        }

        //If sender and recipient are the same, we ignore Fee for simplicity
        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)), null);
    }