```csharp
[assembly: FormulaAssembly("skim")]
namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var toAddress = info.ToAddress;
            var result = new List<KeyValuePair<string, BigDecimal>>();

            // Get distinct tokens involved in the transaction
            var tokens = info.GetDistinctTokens()?.ToList();
            if (tokens == null || !tokens.Any())
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(null);

            // Calculate PNL for each token
            foreach (var token in tokens)
            {
                var transfersForToken = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol).ToList();
                if (transfersForToken != null && transfersForToken.Any())
                {
                    // Calculate total amount transferred to the recipient
                    var totalAmount = transfersForToken.Sum(t => t.Amount);

                    // If toAddress is not the same as fromAddress, it's a loss for the sender
                    if (toAddress != info.FromAddress)
                        result.Add(new KeyValuePair<string, BigDecimal>(info.FromAddress, -totalAmount));

                    // It's a gain for the recipient
                    result.Add(new KeyValuePair<string, BigDecimal>(toAddress, totalAmount));
                }
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}
```