```csharp
[assembly: FormulaAssembly("UniswapV2_PNL")]

namespace Sauron.Formula.UniswapV2_PNL
{
    public class UniswapV2_PNL : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            // Loop through all transfers in the transaction
            foreach (var transfer in info.Transfers)
            {
                if (!pnlDictionary.ContainsKey(transfer.FromAddress))
                    pnlDictionary[transfer.FromAddress] = BigDecimal.Zero;

                if (!pnlDictionary.ContainsKey(transfer.ToAddress))
                    pnlDictionary[transfer.ToAddress] = BigDecimal.Zero;

                // Assuming _reserve0 and _reserve1 are the initial reserves before the transaction
                var reserve0 = new BigDecimal(_reserve0);
                var reserve1 = new BigDecimal(_reserve1);

                if (transfer.TokenAddress == info.ContractAddress)
                {
                    // Calculate price of token at the time of transfer
                    var priceAtTransfer = reserve1 / reserve0;

                    // If user sent tokens, reduce their PNL by the value of tokens in Eth
                    if (transfer.FromAddress == info.SenderAddress)
                        pnlDictionary[transfer.FromAddress] -= transfer.Amount * priceAtTransfer - transfer.Fee;

                    // If user received tokens, add to their PNL the value of tokens in Eth
                    else if (transfer.ToAddress == info.SenderAddress)
                        pnlDictionary[transfer.ToAddress] += transfer.Amount * priceAtTransfer - transfer.Fee;
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary);
        }
    }
}
```