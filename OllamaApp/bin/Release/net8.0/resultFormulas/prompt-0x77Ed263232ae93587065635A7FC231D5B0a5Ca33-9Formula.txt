```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using Nethereum.Util;

[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var fromAddress = info.From;
            var toAddress = info.To;
            var transfers = info.Transfers;

            if (transfers == null || !transfers.Any())
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var tokenPNLs = new Dictionary<string, BigDecimal>();

            foreach (var transfer in transfers)
            {
                var symbol = transfer.TokenInfo.Symbol;
                var amount = transfer.Amount;

                if (!tokenPNLs.ContainsKey(symbol))
                    tokenPNLs[symbol] = new BigDecimal(0);

                // If the toAddress is the same as fromAddress, it's an internal transfer and PNL should be 0.
                if (toAddress != fromAddress)
                {
                    // Subtracting Fee from the amount transferred out of the contract
                    var pnl = info.From == toAddress ? -amount : amount;
                    tokenPNLs[symbol] += pnl;
                }
            }

            // Converting PNL for each token to Eth using provided tokenPrices
            if (tokenPrices != null)
            {
                foreach (var pair in tokenPNLs)
                {
                    var symbol = pair.Key;
                    var pnlInToken = pair.Value;

                    var tokenPrice = tokenPrices.FirstOrDefault(x => x.Key == symbol).Value;
                    if (tokenPrice > 0)
                        tokenPNLs[symbol] = pnlInToken / new BigDecimal(tokenPrice);
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(tokenPNLs.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}
```