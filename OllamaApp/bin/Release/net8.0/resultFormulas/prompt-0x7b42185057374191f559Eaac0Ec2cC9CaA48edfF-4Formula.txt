```csharp
[assembly: FormulaAssembly("UniswapV2_Update")]

namespace Sauron.Formula.UniswapV2_Update
{
    public class UniswapV2_UpdateFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new List<KeyValuePair<string, BigDecimal>>();

            if (info.FromAddress != info.ToAddress && tokenPrices != null) // Exclude transactions where user sends to themselves
            {
                foreach (var token in tokenPrices)
                {
                    var balance0 = info.TokensIn[token.Key] ?? BigDecimal.Zero;
                    var balance1 = info.TokensOut[token.Key] ?? BigDecimal.Zero;
                    var reserve0 = info.PreviousReserve0 ?? BigDecimal.Zero;
                    var reserve1 = info.PreviousReserve1 ?? BigDecimal.Zero;

                    // Calculate price cumulatives
                    var timeElapsed = (uint)(info.CurrentBlockTimestamp % uint.MaxValue) - (info.LastBlockTimestamp % uint.MaxValue);
                    if (timeElapsed > 0 && reserve0 != BigDecimal.Zero && reserve1 != BigDecimal.Zero)
                    {
                        var priceCumulative = UQ112x112_Encode(reserve1).Divide(UQ112x112_Encode(reserve0)).Multiply(timeElapsed);

                        // Calculate PNL based on token price and balance changes
                        var pnlToken = (balance0.Subtract(info.Fee)).Multiply(priceCumulative).Multiply(new BigDecimal((decimal)token.Value));
                        pnlToken -= balance1.Multiply(new BigDecimal((decimal)token.Value));
                        pnl.Add(new KeyValuePair<string, BigDecimal>(info.FromAddress, pnlToken));
                    }
                }
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnl);
        }

        // Helper method to simulate UQ112x112.encode in Solidity
        private BigDecimal UQ112x112_Encode(BigDecimal value)
        {
            return value / (1 << 112);
        }
    }
}
```