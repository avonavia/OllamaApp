```csharp
// Assembly name must be exactly as function name in Solidity contract (even if it starts with a lowercase letter)
[assembly: FormulaAssembly("getReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        // CalculationResult is always IEnumerable<KeyValuePair<string, BigDecimal>>? (address-PNL pairs or null)
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Solidity reserves are mapped to TransactionInfo.Reserve0 and TransactionInfo.Reserve1 properties
            var reserve0 = new KeyValuePair<string, BigDecimal>("reserve0", info.Reserve0);
            var reserve1 = new KeyValuePair<string, BigDecimal>("reserve1", info.Reserve1);

            // Create a list to hold the reserves and their names
            var results = new List<KeyValuePair<string, BigDecimal>> { reserve0, reserve1 };

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(results);
        }
    }
}
```