[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get user's addresses
            var fromAddresses = info.FromAddresses;
            var toAddresses = info.ToAddresses;

            // Get balances of both tokens for the contract address
            var token0Balance = info.Transfers
                .Where(t => t.TokenInfo.Symbol == "token0")
                .Sum(t => t.Amount);

            var token1Balance = info.Transfers
                .Where(t => t.TokenInfo.Symbol == "token1")
                .Sum(t => t.Amount);

            // Get reserve balances of both tokens
            var reserve0 = BigDecimal.FromDecimal(info.Reserve0); // You will need to get these values from your data source as they're not provided in the info object
            var reserve1 = BigDecimal.FromDecimal(info.Reserve1); // You will need to get these values from your data source as they're not provided in the info object

            // Calculate PNL for each user address
            var pnlResults = new Dictionary<string, BigDecimal>();

            foreach (var address in fromAddresses.Concat(toAddresses).Distinct())
            {
                // Calculate the change in token balances due to the sync operation
                var deltaToken0 = token0Balance - reserve0;
                var deltaToken1 = token1Balance - reserve1;

                // Calculate PNL using token prices
                var pnl = deltaToken0 * BigDecimal.FromDecimal(tokenPrices?.FirstOrDefault(p => p.Key == "token0").Value ?? 0) +
                           deltaToken1 * BigDecimal.FromDecimal(tokenPrices?.FirstOrDefault(p => p.Key == "token1").Value ?? 0);

                // If the user is the sender, subtract the fee (if any) from PNL
                if (info.FromAddresses.Contains(address))
                    pnl -= BigDecimal.FromDecimal(info.Fee);

                pnlResults[address] = pnl;
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>()
            {
                Result = pnlResults.Select(r => new KeyValuePair<string, BigDecimal>(r.Key, r.Value))
            };
        }
    }
}