//Assembly name must match exactly with Solidity contract function name
   [assembly: FormulaAssembly("sync")]

   namespace Sauron.Formula.Sync
   {
       public class SyncFormula : IFormulaPlugin
       {
           public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
           {
               if (info == null || info.Transfers == null || !tokenPrices?.Any() ?? true)
                   return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

               var userAddresses = info.Transfers.Select(t => t.From).Distinct();
               var pnlResults = new List<KeyValuePair<string, BigDecimal>>();

               foreach (var address in userAddresses)
               {
                   BigDecimal totalPNL = 0;
                   var userTransfers = info.Transfers.Where(t => t.From == address);

                   foreach (var transfer in userTransfers)
                   {
                       if (!tokenPrices.TryGetValue(transfer.TokenInfo.Symbol, out var tokenPrice))
                           continue;

                       //Calculate PNL for each transfer
                       BigDecimal pnl = transfer.Amount * new BigDecimal((decimal)tokenPrice);

                       //Subtract fee if fromAddress is not the same as toAddress (user sent tokens)
                       if (transfer.From != transfer.To)
                           pnl -= info.Fee;

                       totalPNL += pnl;
                   }

                   pnlResults.Add(new KeyValuePair<string, BigDecimal>(address, totalPNL));
               }

               return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults);
           }
       }
   }