```csharp
// assembly info for PNL calculation
[assembly: FormulaAssembly("Mint")]
namespace Sauron.Formula.Mint
{
    public class MintFormula : IFormulaPlugin
    {
        public CalculationResult<BigDecimal?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // get the relevant values from TransactionInfo object
            var reserve0 = BigDecimal.Parse(info.DecodedInfo["_reserve0"].ToString());
            var reserve1 = BigDecimal.Parse(info.DecodedInfo["_reserve1"].ToString());
            var balance0 = BigDecimal.Parse(info.DecodedInfo["balance0"].ToString());
            var balance1 = BigDecimal.Parse(info.DecodedInfo["balance1"].ToString());
            var totalSupply = BigDecimal.Parse(info.DecodedInfo["_totalSupply"].ToString());

            // calculate amount0 and amount1
            var amount0 = balance0 - reserve0;
            var amount1 = balance1 - reserve1;

            // calculate liquidity
            BigDecimal liquidity;
            if (totalSupply == 0)
                liquidity = BigDecimal.Sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;
            else
                liquidity = BigDecimal.Min(amount0 * totalSupply / reserve0, amount1 * totalSupply / reserve1);

            // calculate PNL: if the user is not the recipient of the minted tokens, then the PNL is negative
            var pnl = info.ToAddress == info.FromAddress ? BigDecimal.Zero : -liquidity;

            return new CalculationResult<BigDecimal?>(pnl);
        }
    }
}
```