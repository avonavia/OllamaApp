```csharp
[assembly: FormulaAssembly("_safeTransfer")]

namespace Sauron.Formula._safeTransfer
{
    public class _safeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get unique tokens and their amounts involved in the transaction
            var tokensWithAmounts = GetTokensWithAmounts(info.Transfers);

            // Create a dictionary to store user addresses and their corresponding PNL
            var userPNLs = new Dictionary<string, BigDecimal>();

            foreach (var tokenAmount in tokensWithAmounts)
            {
                // Check if the transfer is not to the sender's address
                if (tokenAmount.Key.Symbol != info.ToAddress)
                {
                    // Calculate PNL for each user address
                    // If tokenPrices are provided, calculate PNL in Eth by multiplying amount with price
                    var pnl = tokenPrices?.FirstOrDefault(tp => tp.Key == tokenAmount.Key.Symbol).Value != null ?
                        BigDecimal.Multiply(tokenAmount.Value, (BigDecimal)tokenPrices.FirstOrDefault(tp => tp.Key == tokenAmount.Key.Symbol).Value) :
                        tokenAmount.Value;

                    // Subtract fee from PNL if the transaction sender is not the same as the user address
                    if (info.FromAddress != info.ToAddress) pnl -= info.Fee;

                    // Update or add the PNL to the dictionary for each user address
                    if (userPNLs.ContainsKey(info.ToAddress))
                        userPNLs[info.ToAddress] += pnl;
                    else
                        userPNLs[info.ToAddress] = pnl;
                }
            }

            // Return the dictionary of user addresses and their corresponding PNL as KeyValuePairs
            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(userPNLs);
        }
    }
}
```