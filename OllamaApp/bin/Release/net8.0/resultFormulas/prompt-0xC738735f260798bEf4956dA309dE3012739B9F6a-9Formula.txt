[assembly: FormulaAssembly("Skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.Transfers == null || !tokenPrices?.Any() ?? true)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Empty;

            var pnl = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers)
            {
                if (tokenPrices.TryGetValue(transfer.TokenInfo.Symbol, out decimal price))
                {
                    BigDecimal tokenAmountInEth = transfer.Amount * (decimal)price;

                    if (info.FromAddress == info.ToAddress)
                        pnl[info.FromAddress] -= tokenAmountInEth + info.Fee;
                    else if (pnl.ContainsKey(info.FromAddress))
                        pnl[info.FromAddress] -= tokenAmountInEth + info.Fee;
                    else
                        pnl[info.FromAddress] = -tokenAmountInEth - info.Fee;
                }
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(pnl);
        }
    }
}