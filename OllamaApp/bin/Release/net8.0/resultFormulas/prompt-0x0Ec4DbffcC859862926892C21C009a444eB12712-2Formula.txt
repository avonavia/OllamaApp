[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Dictionary to hold user addresses and their PNLs.
            var userPnls = new Dictionary<string, BigDecimal>();

            // Iterate over all transfers in the transaction.
            foreach (var transfer in info.Transfers)
            {
                // If this is not a token transfer to another address, continue with next transfer.
                if (transfer.ToAddress == null || transfer.FromAddress == null || transfer.Amount <= 0)
                    continue;

                // Calculate token price in Eth.
                var tokenPrice = BigDecimal.Zero;
                if(tokenPrices != null && tokenPrices.Any(t => t.Key == transfer.TokenInfo.Symbol))
                    tokenPrice = (decimal)tokenPrices.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value;

                // Calculate the value of the tokens transferred in Eth.
                var valueInEth = BigDecimal.Multiply((BigDecimal)transfer.Amount, tokenPrice);

                // If from and to addresses are different, we have a PNL calculation.
                if (transfer.ToAddress != transfer.FromAddress)
                {
                    // Add or subtract the value of tokens sent to/from user's PNL, respectively.
                    UpdateUserPnl(userPnls, transfer.FromAddress, -valueInEth);
                    UpdateUserPnl(userPnls, transfer.ToAddress, valueInEth);
                }
            }

            // Subtract the transaction fee from sender's PNL.
            if (info.Sender != null && userPnls.ContainsKey(info.Sender))
                userPnls[info.Sender] -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> { Result = userPnls };
        }

        private void UpdateUserPnl(Dictionary<string, BigDecimal> pnls, string address, BigDecimal amount)
        {
            if (pnls.ContainsKey(address))
                pnls[address] += amount;
            else
                pnls[address] = amount;
        }
    }
}