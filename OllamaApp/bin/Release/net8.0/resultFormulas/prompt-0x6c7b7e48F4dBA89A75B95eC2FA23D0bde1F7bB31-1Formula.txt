// The provided Solidity contract method retrieves reserves for two tokens, along with the last updated timestamp.
   // We will create an equivalent C# Formula method to accomplish this within our application.

[assembly: FormulaAssembly("GetReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // We'll assume that the reserves and blockTimestampLast are already decoded in TransactionInfo object.

            var result = new List<KeyValuePair<string, BigDecimal>>();

            if (info.Reserve0 != null)
                result.Add(new KeyValuePair<string, BigDecimal>("Token0Reserve", info.Reserve0));

            if (info.Reserve1 != null)
                result.Add(new KeyValuePair<string, BigDecimal>("Token1Reserve", info.Reserve1));

            if (info.BlockTimestampLast != null)
                result.Add(new KeyValuePair<string, BigDecimal>("BlockTimestampLast", new BigDecimal((decimal)info.BlockTimestampLast)));

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(result);
        }
    }
}