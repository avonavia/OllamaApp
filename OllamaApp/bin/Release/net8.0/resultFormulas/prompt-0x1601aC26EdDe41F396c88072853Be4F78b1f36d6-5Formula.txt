[assembly: FormulaAssembly("_mintFee")]

namespace Sauron.Formula._MintFee
{
    public class _MintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var feeTo = info.FactoryFeeTo;

            if (feeTo == "0x0")
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var reserve0 = info.Reserve0;
            var reserve1 = info.Reserve1;
            var totalSupply = info.TotalSupply;
            var kLast = info.KLast;

            if (kLast != 0)
            {
                var rootK = BigDecimal.Sqrt(reserve0 * reserve1);
                var rootKLast = BigDecimal.Sqrt(kLast);

                if (rootK > rootKLast)
                {
                    var numerator = totalSupply * (rootK - rootKLast);
                    var denominator = rootK * 5 + rootKLast;
                    var liquidity = numerator / denominator;

                    if (liquidity > 0)
                        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new List<KeyValuePair<string, BigDecimal>>
                        {
                            new KeyValuePair<string, BigDecimal>(feeTo, liquidity - info.Fee)
                        });
                }
            }
            else if (kLast != 0)
            {
                // kLast is reset to 0 in the contract, but no PNL calculation is needed here
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);
        }
    }
}