// Assembly info for PNL calculation formula
[assembly: FormulaAssembly("_safeTransfer")]

namespace Sauron.Formula._safeTransfer
{
    using Nethereum.Util;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Numerics;

    public class _safeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Check if the transaction is successful and there are transfers
            if (info.IsSuccessful && info.Transfers != null && info.Fee > BigDecimal.Zero)
            {
                var pnl = new Dictionary<string, BigDecimal>();

                foreach (var transfer in info.GetDistinctTokens() ?? Enumerable.Empty<TokenInfo>())
                {
                    // Initialize PNL for the user address
                    if (!pnl.ContainsKey(info.FromAddress))
                        pnl[info.FromAddress] = BigDecimal.Zero;

                    // Subtract the transferred amount and fee from the user's PNL in ETH
                    var tokenAmount = info.GetTokensWithAmounts()?.FirstOrDefault(t => t.Key.Symbol == transfer.Symbol).Value ?? BigDecimal.Zero;
                    var ethPrice = tokenPrices?.FirstOrDefault(t => t.Key == transfer.Symbol).Value ?? 0m;
                    pnl[info.FromAddress] -= (tokenAmount * (decimal)ethPrice);
                }

                // Subtract the transaction fee from the user's PNL in ETH
                pnl[info.FromAddress] -= info.Fee / UnitConversion.WeiToEther;

                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>()
                    .WithValue(pnl.Select(x => new KeyValuePair<string, BigDecimal>(x.Key, x.Value)));
            }

            // Return no PNL changes if the transaction was not successful or there were no transfers
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>();
        }
    }
}