[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.Sync
{
    using Nethereum.Util;
    using System.Collections.Generic;
    using System.Linq;
    using System.Numerics;

    public class SyncFormula : IFormulaPlugin
    {
        //CalculationResult is a wrapper for PNL data and contains additional information about the calculation result.
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Get unique tokens in transaction
            var tokens = GetDistinctTokens(info.Transfers);

            //If there are no tokens or not enough tokens for calculation, return empty result
            if (tokens == null || tokens.Count() < 2)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var token0 = tokens.ElementAt(0);
            var token1 = tokens.ElementAt(1);

            //Get balance of each token for the contract address (this)
            var balanceToken0 = info.Transfers.Where(t => t.TokenInfo.Symbol == token0.Symbol && t.ToAddress == info.Contract).Sum(t => t.Amount);
            var balanceToken1 = info.Transfers.Where(t => t.TokenInfo.Symbol == token1.Symbol && t.ToAddress == info.Contract).Sum(t => t.Amount);

            //Reserve amounts for tokens are assumed to be retrieved from some source (not provided in the code snippet)
            BigDecimal reserve0 = 0; //Placeholder, replace with actual value
            BigDecimal reserve1 = 0; //Placeholder, replace with actual value

            //Calculate PNL using the update formula (assumed to be equivalent to sync function in Solidity contract)
            var pnl = UpdatePNL(balanceToken0, balanceToken1, reserve0, reserve1);

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new List<KeyValuePair<string, BigDecimal>>() { new KeyValuePair<string, BigDecimal>(info.Contract, pnl) });
        }

        //Update PNL calculation method (assumed to be equivalent to _update function in Solidity contract)
        private static BigDecimal UpdatePNL(BigDecimal balance0, BigDecimal balance1, BigDecimal reserve0, BigDecimal reserve1)
        {
            return (balance0 * reserve1 - balance1 * reserve0) / (reserve0 + reserve1);
        }
    }
}