//Method for PNL calculation based on Solidity contract's skim method

[assembly: FormulaAssembly("Skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var transfers = info.Transfers;
            if (transfers == null || !transfers.Any()) return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            // Get unique user addresses from the transaction
            var users = transfers.Select(t => t.FromAddress).Distinct();

            var pnlResults = new List<KeyValuePair<string, BigDecimal>>();

            foreach (var user in users)
            {
                // Calculate total value of tokens skimmed by the user
                var totalSkimmedValue = transfers.Where(t => t.FromAddress == user)
                    .Select(t => t.Amount * new BigDecimal((decimal)(tokenPrices?.FirstOrDefault(p => p.Key == t.TokenInfo.Symbol).Value ?? 0)))
                    .Sum();

                // Subtract fee from the total value
                var totalSkimmedValueAfterFee = totalSkimmedValue - info.Fee;

                pnlResults.Add(new KeyValuePair<string, BigDecimal>(user, totalSkimmedValueAfterFee));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults);
        }
    }
}