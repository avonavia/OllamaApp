```csharp
[assembly: FormulaAssembly("SafeTransferPNL")]

namespace Sauron.Formula.SafeTransferPNL
{
    public class SafeTransferPNLFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlResults = new Dictionary<string, BigDecimal>();

            if (info.Transfers == null || !info.Transfers.Any())
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults);

            foreach (var transfer in info.Transfers)
            {
                var fromAddress = info.From;
                var toAddress = transfer.To;

                if (!pnlResults.ContainsKey(fromAddress))
                    pnlResults[fromAddress] = BigDecimal.Zero;

                if (!pnlResults.ContainsKey(toAddress))
                    pnlResults[toAddress] = BigDecimal.Zero;

                var tokenPrice = BigDecimal.One; // Assume unit price if no prices are provided
                if (tokenPrices != null)
                {
                    var tokenPriceResult = tokenPrices.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol);
                    if (!tokenPriceResult.Equals(default))
                        tokenPrice = new BigDecimal((decimal)tokenPriceResult.Value);
                }

                var amountInEth = transfer.Amount * tokenPrice;

                // Subtract fee only from sender's PNL if they are not the same as recipient
                if (fromAddress != toAddress)
                    pnlResults[fromAddress] -= amountInEth + info.Fee;

                pnlResults[toAddress] += amountInEth; // Recipient gets the full amount
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults);
        }
    }
}
```