[assembly: FormulaAssembly("Sync")]

namespace Sauron.Formula.Sync
{
    public class SyncFormula : IFormulaPlugin
    {
        // Note that we are only calculating PNL for the contract address, not for token holders
        // Also note that we assume that token0 and token1 prices are provided in tokenPrices parameter
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.ToAddress != info.FromAddress || tokenPrices == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Empty;

            // Get unique tokens in the transaction
            var tokens = info.GetDistinctTokens();

            if (tokens?.Count() != 2)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Empty;

            var token0 = tokens.ElementAt(0);
            var token1 = tokens.ElementAt(1);

            // Get balances of tokens in the contract
            var balanceToken0 = info.Transfers?.Where(t => t.TokenInfo.Symbol == token0.Symbol).Sum(t => t.Amount) ?? BigDecimal.Zero;
            var balanceToken1 = info.Transfers?.Where(t => t.TokenInfo.Symbol == token1.Symbol).Sum(t => t.Amount) ?? BigDecimal.Zero;

            // Get prices of tokens
            var priceToken0 = tokenPrices.FirstOrDefault(p => p.Key == token0.Symbol).Value;
            var priceToken1 = tokenPrices.FirstOrDefault(p => p.Key == token1.Symbol).Value;

            if (priceToken0 == 0 || priceToken1 == 0)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Empty;

            // Calculate PNL in Eth for the contract address
            var pnl = (balanceToken0 * (decimal)priceToken0 + balanceToken1 * (decimal)priceToken1 - info.FeeInEth) / (decimal)info.PriceOfEth;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(new List<KeyValuePair<string, BigDecimal>>() { new KeyValuePair<string, BigDecimal>(info.ToAddress, pnl) });
        }
    }
}