```csharp
[assembly: FormulaAssembly("_safeTransfer")] // this should be EXACTLY as function name in Solidity contract (even if it starts with a lowercase letter)

namespace Sauron.Formula._safeTransfer

public class _safeTransferFormula : IFormulaPlugin
{
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var fromAddress = info.FromAddress; // assuming that the sender's address is stored in this property
        var pnl = new Dictionary<string, BigDecimal>();

        foreach (var transfer in info.Transfers)
        {
            if(transfer.ToAddress == to && transfer.TokenInfo.ContractAddress == token)
            {
                // Since we are assuming that the PNL is calculated for user addresses, not tokens,
                // and `_safeTransfer` is a transfer operation from the sender's address to another one,
                // we subtract the transferred amount from the sender's balance.
                if (pnl.ContainsKey(fromAddress))
                    pnl[fromAddress] -= Convert.ToDecimal(transfer.Amount) * tokenPrices?.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value ?? 0;
                else
                    pnl[fromAddress] = -Convert.ToDecimal(transfer.Amount) * tokenPrices?.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value ?? 0;
            }
        }

        // Subtract the fee from the sender's balance if it is not a self-transfer
        if (fromAddress != to && info.Fee > 0)
        {
            var feeInEth = Web3.Convert.FromWei(info.Fee, Unit.Ether);
            if (pnl.ContainsKey(fromAddress))
                pnl[fromAddress] -= Convert.ToDecimal(feeInEth);
            else
                pnl[fromAddress] = -Convert.ToDecimal(feeInEth);
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
    }
}
```