//Assembly info for Formula
    [assembly: FormulaAssembly("Add")]

    namespace Sauron.Formula.Add
    {
        public class AddFormula : IFormulaPlugin
        {
            public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
                IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
            {
                //Check if TransactionInfo and its required fields are not null
                if (info == null || info.Transfers == null || !info.Transfers.Any())
                {
                    return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);
                }

                //Initialize PNL dictionary to store address-PNL pairs
                Dictionary<string, BigDecimal> pnl = new Dictionary<string, BigDecimal>();

                //Iterate over all transfers in the transaction
                foreach (var transfer in info.Transfers)
                {
                    //Skip if amount is zero or less
                    if (transfer.Amount <= 0) continue;

                    //Update PNL for sender address by subtracting transfer amount (including fee)
                    UpdatePNL(pnl, transfer.FromAddress, -transfer.Amount);

                    //Skip calculation for transfers without a recipient or if recipient is the same as sender
                    if (string.IsNullOrEmpty(transfer.ToAddress) || transfer.ToAddress == transfer.FromAddress) continue;

                    //Update PNL for recipient address by adding transfer amount
                    UpdatePNL(pnl, transfer.ToAddress, transfer.Amount);
                }

                //Convert dictionary to list of KeyValuePair and return CalculationResult with the result
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
            }

            //Helper method to update PNL dictionary for a given address
            private void UpdatePNL(Dictionary<string, BigDecimal> pnl, string address, BigDecimal amount)
            {
                if (pnl.ContainsKey(address))
                    pnl[address] += amount;
                else
                    pnl[address] = amount;
            }
        }
    }