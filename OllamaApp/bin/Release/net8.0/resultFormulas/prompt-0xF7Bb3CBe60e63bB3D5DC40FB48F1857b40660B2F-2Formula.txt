```csharp
[assembly: FormulaAssembly("_safeTransfer")]

namespace Sauron.Formula._safeTransfer
{
    public class _safeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers)
            {
                if (transfer.ToAddress != info.FromAddress && transfer.TokenInfo?.Symbol == "UNI-V2") // Assuming UNI-V2 is the token symbol for Uniswap V2 tokens
                {
                    var amountInEth = transfer.Amount * new BigDecimal(tokenPrices?.FirstOrDefault(p => p.Key == "UNI-V2").Value ?? 0); // Converting to Eth using token price if available
                    if (pnl.ContainsKey(info.FromAddress))
                        pnl[info.FromAddress] -= amountInEth + info.Fee;
                    else
                        pnl[info.FromAddress] = -amountInEth - info.Fee;

                    if (pnl.ContainsKey(transfer.ToAddress))
                        pnl[transfer.ToAddress] += amountInEth;
                    else
                        pnl[transfer.ToAddress] = amountInEth;
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);
        }
    }
}
```