```csharp
using Sauron.Formula.SafeTransfer;
using System.Collections.Generic;
using Nethereum.Util;
using System.Linq;
using System.Numerics;

[assembly: FormulaAssembly("_safeTransfer")]
namespace Sauron.Formula._safeTransfer
{
    public class _safeTransferFormula : IFormulaPlugin
    {
        private const string Selector = "0xa9059cbb"; // ABI-encoded selector for the transfer function

        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();
            if (info.From != info.To && info.Transfers != null)
            {
                foreach (var transfer in info.Transfers.Where(t => t.Input?.StartsWith(Selector) ?? false))
                {
                    var toAddress = new Address("0x" + transfer.Input.Substring(10, 40));
                    if (toAddress != info.To && tokenPrices != null)
                    {
                        var amountInEth = ConvertTokenToEth(transfer.Amount, transfer.TokenInfo.Symbol, tokenPrices);
                        UpdatePnl(pnl, info.From, amountInEth);
                        UpdatePnl(pnl, toAddress.ToString(), -amountInEth);
                    }
                }
            }
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> { Result = pnl };
        }

        private void UpdatePnl(Dictionary<string, BigDecimal> pnl, string address, BigDecimal amount)
        {
            if (pnl.ContainsKey(address))
                pnl[address] += amount;
            else
                pnl[address] = amount;
        }

        private BigDecimal ConvertTokenToEth(BigDecimal tokenAmount, string tokenSymbol, IEnumerable<KeyValuePair<string, decimal>> tokenPrices)
        {
            var price = tokenPrices.FirstOrDefault(t => t.Key == tokenSymbol).Value;
            return price > 0 ? BigDecimal.Divide(tokenAmount, new BigDecimal((decimal)price)) : BigDecimal.Zero;
        }
    }
}
```