[assembly: FormulaAssembly("Initialize")]

using Sauron.Formula.Common;

namespace Sauron.Formula.Initialize
{
    public class InitializeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // This formula does not calculate PNL, as it is only initializing the contract.
            // However, since the contract requires specific parameters (token0 and token1 addresses), we can return them for reference.

            var result = new List<KeyValuePair<string, BigDecimal>>();

            if (info.DecodedData != null)
            {
                // Assuming that the decoded data contains two address parameters
                var token0Address = info.DecodedData[0].ToString();
                var token1Address = info.DecodedData[1].ToString();

                result.Add(new KeyValuePair<string, BigDecimal>("token0", new BigDecimal(token0Address)));
                result.Add(new KeyValuePair<string, BigDecimal>("token1", new BigDecimal(token1Address)));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(result);
        }
    }
}