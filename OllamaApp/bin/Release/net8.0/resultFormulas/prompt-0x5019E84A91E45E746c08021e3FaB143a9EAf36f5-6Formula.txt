//Method to get PNL for each user in transaction
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        //Calculate PNL only if transfer is successful and token price is available
        if (info.Success && tokenPrices != null)
        {
            var pnlResult = new Dictionary<string, BigDecimal>();

            //Subtract sent amount from sender's balance
            AddOrUpdateDictionary(pnlResult, info.FromAddress, -info.Transfers[0].Amount * new BigDecimal(tokenPrices.FirstOrDefault(x => x.Key == info.TokenInfo?.Symbol).Value));

            //Add received amount to recipient's balance if it's not a self-transfer
            if (info.ToAddress != info.FromAddress)
                AddOrUpdateDictionary(pnlResult, info.ToAddress, info.Transfers[0].Amount * new BigDecimal(tokenPrices.FirstOrDefault(x => x.Key == info.TokenInfo?.Symbol).Value));

            //Subtract fee from sender's balance if it's not a self-transfer
            if (info.ToAddress != info.FromAddress)
                AddOrUpdateDictionary(pnlResult, info.FeePaidBy, -info.GasPrice * new BigDecimal((decimal)info.GasUsed));

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Successful(pnlResult);
        }

        //Return failed calculation if transfer was unsuccessful or token price is not available
        return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Failed("Calculation failed");
    }

    private void AddOrUpdateDictionary(IDictionary<string, BigDecimal> dictionary, string key, BigDecimal value)
    {
        if (dictionary.ContainsKey(key))
            dictionary[key] += value;
        else
            dictionary.Add(key, value);
    }