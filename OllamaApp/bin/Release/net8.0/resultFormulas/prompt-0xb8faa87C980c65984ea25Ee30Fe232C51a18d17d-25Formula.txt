[assembly: FormulaAssembly("excludeFromFees")]

namespace Sauron.Formula.excludeFromFees
{
    public class excludeFromFeesFormula : IFormulaPlugin
    {
        // This formula doesn't calculate any PNL, it simply checks if the sender is excluded from fees and returns a message.
        // So, we return null for the calculation result as per rule 1) in the system prompt.
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the fromAddress from TransactionInfo object.
            var fromAddress = info.FromAddress;

            // Check if the fromAddress is excluded from fees based on the Solidity contract logic.
            // In this case, as we don't have access to the actual state of the contract, we can't determine it directly.
            // However, since the function changes a mapping value in the contract, it suggests that the information about who is excluded from fees should be stored somewhere in the TransactionInfo object or tokenPrices parameter.
            // For the sake of this exercise, let's assume there is a property "IsExcludedFromFees" in the TokenInfo class within the TransactionInfo object.

            var isExcluded = info.Transfers?.Any(t => t.TokenInfo.IsExcludedFromFees) ?? false;

            // As per rule 12), we don't return any PNL calculation here, so we simply return null for the calculation result.
            // Rule 11) also applies, so we don't include a message in our calculation result.
            if (isExcluded)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            // If the sender is not excluded from fees, we assume that PNL calculation would continue as usual.
            // However, without the actual PNL calculation logic, we can't provide it here. So for this case, let's just return null as well.
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);
        }
    }
}