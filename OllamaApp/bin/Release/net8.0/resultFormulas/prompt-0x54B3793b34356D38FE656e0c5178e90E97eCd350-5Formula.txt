[assembly: FormulaAssembly("_mintFee")]

namespace Sauron.Formula._MintFee
{
    public class _MintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the feeTo address from the factory contract
            string feeTo = info.FactoryFeeTo;

            bool feeOn = !string.IsNullOrEmpty(feeTo);

            BigDecimal _kLast = new BigDecimal(info.KLast);

            if (feeOn)
            {
                if (_kLast != 0)
                {
                    BigDecimal reserve0 = new BigDecimal(info.Reserve0);
                    BigDecimal reserve1 = new BigDecimal(info.Reserve1);

                    BigDecimal rootK = BigDecimal.Sqrt(reserve0 * reserve1);
                    BigDecimal rootKLast = BigDecimal.Sqrt(_kLast);

                    if (rootK > rootKLast)
                    {
                        BigDecimal totalSupply = new BigDecimal(info.TotalSupply);
                        BigDecimal numerator = totalSupply * (rootK - rootKLast);
                        BigDecimal denominator = rootK * 5 + rootKLast;
                        BigDecimal liquidity = numerator / denominator;

                        if (liquidity > 0)
                        {
                            // Fee is minted to feeTo address, so we calculate PNL for the feeTo address only
                            var result = new List<KeyValuePair<string, BigDecimal>>();
                            result.Add(new KeyValuePair<string, BigDecimal>(feeTo, liquidity));
                            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(result);
                        }
                    }
                }
            }
            else if (_kLast != 0)
            {
                // If fee is turned off and kLast is not zero, we reset kLast to zero
                info.KLast = "0";
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(null);
        }
    }
}