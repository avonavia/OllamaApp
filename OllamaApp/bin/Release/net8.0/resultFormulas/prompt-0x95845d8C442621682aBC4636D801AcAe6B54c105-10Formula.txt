```csharp
[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();
            if (info.FromAddress != null)
                AddTokenToPnl(pnl, info, info.FromAddress, "token0", -info.BalanceChanges["token0"]);
            if (info.ToAddress != null && info.ToAddress != info.FromAddress)
                AddTokenToPnl(pnl, info, info.ToAddress, "token1", -info.BalanceChanges["token1"]);

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnl.Select(x => new KeyValuePair<string, BigDecimal>(x.Key, x.Value)));
        }

        private void AddTokenToPnl(Dictionary<string, BigDecimal> pnl, TransactionInfo info, string address, string tokenSymbol, BigDecimal balanceChange)
        {
            if (info.TokenPrices != null && info.TokenPrices.TryGetValue(tokenSymbol, out decimal price))
                pnl[address] = AddBigDecimals(pnl.ContainsKey(address) ? pnl[address] : BigDecimal.Zero, balanceChange * price);
        }

        private BigDecimal AddBigDecimals(BigDecimal a, BigDecimal b) => new BigDecimal(a.Value + b.Value);
    }
}
```