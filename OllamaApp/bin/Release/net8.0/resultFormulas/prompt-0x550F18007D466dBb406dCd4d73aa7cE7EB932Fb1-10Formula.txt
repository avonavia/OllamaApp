[assembly: FormulaAssembly("SyncFormula")]

using Nethereum.RPC.Eth.DTOs;
using Sauron.Shared.Models;
using System;
using System.Collections.Generic;
using System.Numerics;

namespace Sauron.Formula.SyncFormula
{
    public class SyncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Validate inputs
            if (info == null || string.IsNullOrEmpty(info.FromAddress))
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>("Invalid TransactionInfo object or FromAddress is not provided");

            var result = new Dictionary<string, BigDecimal>();
            var fromAddress = info.FromAddress;

            // Get token balances and reserves for both tokens
            TokenTransferInfo? token0Balance = info.Transfers?.Find(t => t.TokenInfo.Symbol == "token0");
            TokenTransferInfo? token1Balance = info.Transfers?.Find(t => t.TokenInfo.Symbol == "token1");

            if (token0Balance != null && tokenPrices?.FirstOrDefault(tp => tp.Key == "token0").Value is decimal token0Price)
                result[fromAddress] += token0Balance.Amount * new BigDecimal((decimal)token0Price);

            if (token1Balance != null && tokenPrices?.FirstOrDefault(tp => tp.Key == "token1").Value is decimal token1Price)
                result[fromAddress] += token1Balance.Amount * new BigDecimal((decimal)token1Price);

            // Subtract fee if necessary (assuming it's in ETH)
            if (!string.IsNullOrEmpty(info.Fee))
            {
                var feeInEth = Web3.Web3Utilities.Convert.FromWei(new BigInteger(BigDecimal.Parse(info.Fee)));
                result[fromAddress] -= new BigDecimal((decimal)feeInEth);
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(result.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}