// Assembly info for PNL calculation formula
[assembly: System.Reflection.AssemblyTitle("PNL Calculation Formula")]
[assembly: System.Reflection.AssemblyDescription("A formula to calculate Profit and Loss (PNL) for a swap transaction in UniswapV2.")]
[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

using System;
using System.Numerics;

namespace PNLCalculationFormula
{
    public class Calculator
    {
        /// <summary>
        /// Calculate the Profit and Loss (PNL) for a swap transaction in UniswapV2.
        /// </summary>
        /// <param name="amount0Out">The amount of token 0 sent out.</param>
        /// <param name="amount1Out">The amount of token 1 sent out.</param>
        /// <param name="reserve0">The total amount of token 0 in the pool before the swap.</param>
        /// <param name="reserve1">The total amount of token 1 in the pool before the swap.</param>
        /// <param name="balance0">The amount of token 0 in the contract after the swap.</param>
        /// <param name="balance1">The amount of token 1 in the contract after the swap.</param>
        /// <returns>Profit and Loss (PNL) in Eth for the user.</returns>
        public static BigInteger CalculatePNL(BigInteger amount0Out, BigInteger amount1Out, BigInteger reserve0, BigInteger reserve1, BigInteger balance0, BigInteger balance1)
        {
            // Calculate the amount of tokens received back to the contract.
            var amount0In = (balance0 > reserve0 - amount0Out) ? (balance0 - (reserve0 - amount0Out)) : 0;
            var amount1In = (balance1 > reserve1 - amount1Out) ? (balance1 - (reserve1 - amount1Out)) : 0;

            // Calculate the value of tokens received in and out.
            var valueIn = (amount0In * reserve1 / reserve0) + amount1In;
            var valueOut = amount0Out + (amount1Out * reserve0 / reserve1);

            // Calculate PNL, considering fee as 3 bips (0.003%).
            var pnl = valueOut - valueIn - ((valueIn + valueOut) * 0.003M / 2M);

            return BigInteger.FromDecimal(pnl);
        }
    }
}