```csharp
[assembly: FormulaAssembly("_mintFee")]

namespace Sauron.Formula._mintFee
{
    public class _mintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.FeeTo != "0x0") // feeOn is true
            {
                var _reserve0 = new BigDecimal(info.Reserve0);
                var _reserve1 = new BigDecimal(info.Reserve1);
                var kLast = new BigDecimal(info.KLast);

                if (kLast != 0)
                {
                    var rootK = Math.Sqrt(_reserve0 * _reserve1);
                    var rootKLast = Math.Sqrt(kLast);

                    if (rootK > rootKLast)
                    {
                        var totalSupply = new BigDecimal(info.TotalSupply);
                        var numerator = totalSupply * (rootK - rootKLast);
                        var denominator = 5 * rootK + rootKLast;
                        var liquidity = numerator / denominator;

                        if (liquidity > 0)
                            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(new List<KeyValuePair<string, BigDecimal>> { new KeyValuePair<string, BigDecimal>(info.FeeTo, -info.Fee) }); // Subtract fee from PNL
                    }
                }
            }
            else if (info.KLast != "0")
            {
                info.KLast = "0";
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(null); // No PNL change for this transaction
        }
    }
}
```