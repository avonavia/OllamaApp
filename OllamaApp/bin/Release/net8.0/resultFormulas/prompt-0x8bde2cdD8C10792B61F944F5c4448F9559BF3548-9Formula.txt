```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Initialize pnl for the user
            var userPnl = new Dictionary<string, BigDecimal>();

            // Get distinct tokens in transaction
            var tokens = info.GetDistinctTokens();

            if (tokens == null)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            foreach (var tokenInfo in tokens)
            {
                // Get transfers for current token
                var transfers = info.Transfers.Where(t => t.TokenInfo == tokenInfo).ToList();

                if (!transfers.Any())
                    continue;

                // Calculate total amount transferred to the user in this transaction
                var totalAmountToUser = transfers.Sum(t => t.Amount);

                // Subtract fee from the total amount, if any
                totalAmountToUser -= info.Fee;

                // Convert token amount to Eth and add it to user's PNL
                var price = tokenPrices?.FirstOrDefault(p => p.Key == tokenInfo.Symbol).Value ?? 0m;
                userPnl[info.ToAddress] += totalAmountToUser * (decimal)price;
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(userPnl);
        }
    }
}
```