[assembly: FormulaAssembly("sendETHToFee")]

namespace Sauron.Formula.sendETHToFee
{
    public class sendETHToFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get fee wallet address
            var feeWalletAddress = info.TransactionParameters["_taxWallet"];

            // Check if there is any ETH transfer to the fee wallet
            var ethTransferToFee = info.Transfers?.FirstOrDefault(t => t.TokenInfo.Symbol == "ETH" && t.ToAddress == feeWalletAddress);

            // If there is no such transfer, return null (no PNL change)
            if (ethTransferToFee == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(null);

            // Calculate PNL for all user addresses in the transaction
            var pnlResults = info.FromAddresses
                .Distinct()
                .Select(addr => new KeyValuePair<string, BigDecimal>(addr, -ethTransferToFee.Amount));

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnlResults);
        }
    }
}