```csharp
using System;

public class SwapCalculator
{
    // Assembly info for PNL calculation without messages for user
    [assembly: System.Reflection.AssemblyTitle("Swap PNL Calculator")]
    [assembly: System.Reflection.AssemblyDescription("A calculator for the Profit and Loss of a UniswapV2 swap transaction.")]
    [assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

    // Method to calculate PNL based on UniswapV2 swap function
    public static decimal CalculatePNL(decimal reserve0, decimal reserve1, decimal amount0Out, decimal amount1Out)
    {
        // Check if output amounts are valid
        if (amount0Out <= 0 && amount1Out <= 0)
            throw new ArgumentException("Insufficient output amount");

        // Calculate the input amounts based on remaining reserves
        decimal amount0In = reserve0 < amount0Out ? 0 : reserve0 - amount0Out;
        decimal amount1In = reserve1 < amount1Out ? 0 : reserve1 - amount1Out;

        // Check if input amounts are valid
        if (amount0In <= 0 && amount1In <= 0)
            throw new ArgumentException("Insufficient input amount");

        // Calculate the PNL based on the input and output amounts
        decimal pnl = -(amount0In * (reserve1 / reserve0)) - amount1Out;

        // Return the calculated PNL in Eth
        return pnl;
    }
}
```