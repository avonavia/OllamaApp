[assembly: FormulaAssembly("Skim")]

using Nethereum.Hex.HexConvertors.Extensions;
using Sauron.Formula.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info?.Transfers == null || !info.Transfers.Any())
            {
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
                    { Data = null };
            }

            var userPnl = info.Transfers
                .GroupBy(t => t.FromAddress)
                .Select(grouping => new KeyValuePair<string, BigDecimal>(
                    grouping.Key,
                    CalculatePnl(grouping)));

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            {
                Data = userPnl,
                Message = null // No messages for the user in this scenario
            };
        }

        private static BigDecimal CalculatePnl(IGrouping<string, TransferInfo> grouping)
        {
            var tokenPricesDictionary = grouping.ToDictionary(t => t.TokenInfo.Symbol.HexToByteArray(), t => new BigDecimal((decimal)t.Price));
            var pnl = BigDecimal.Zero;

            foreach (var transfer in grouping)
            {
                // If user sends tokens to themselves, no PNL is calculated for this transaction
                if (transfer.FromAddress != transfer.ToAddress)
                {
                    if (tokenPricesDictionary.TryGetValue(transfer.TokenInfo.Symbol.HexToByteArray(), out var tokenPrice))
                    {
                        pnl -= transfer.Amount * tokenPrice; // Subtract the value of tokens sent from user's PNL
                    }
                }
            }

            return pnl;
        }
    }
}