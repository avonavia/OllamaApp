[assembly: FormulaAssembly("UNISWAP_V2")]

namespace Sauron.Formula.UNISWAP_V2
{
    public class UNISWAP_V2Formula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            // Get the user address from TransactionInfo
            string userAddress = info.FromAddress;

            // Initialize PNL for user as 0
            if (!pnlDictionary.ContainsKey(userAddress))
                pnlDictionary[userAddress] = BigDecimal.Zero;

            // Calculate the new price cumulative values
            var timeElapsed = (BigDecimal)info.BlockTimestamp - info.BlockTimestampLast;
            BigDecimal price0CumulativeNew, price1CumulativeNew;

            if (timeElapsed > 0 && info.Reserve0 != 0 && info.Reserve1 != 0)
            {
                price0CumulativeNew = ((BigDecimal)info.Reserve1 / info.Reserve0) * timeElapsed;
                price1CumulativeNew = ((BigDecimal)info.Reserve0 / info.Reserve1) * timeElapsed;
            }
            else
            {
                price0CumulativeNew = BigDecimal.Zero;
                price1CumulativeNew = BigDecimal.Zero;
            }

            // Calculate the PNL for user
            if (info.Balance0 < info.Reserve0) // User sold token0
                pnlDictionary[userAddress] -= (price0CumulativeNew - info.Price0CumulativeLast) * (BigDecimal)(info.Reserve1 / Math.Pow(2, 112));
            else if (info.Balance0 > info.Reserve0) // User bought token0
                pnlDictionary[userAddress] += (price0CumulativeNew - info.Price0CumulativeLast) * (BigDecimal)(info.Reserve1 / Math.Pow(2, 112));

            if (info.Balance1 < info.Reserve1) // User sold token1
                pnlDictionary[userAddress] -= (price1CumulativeNew - info.Price1CumulativeLast) * (BigDecimal)(info.Reserve0 / Math.Pow(2, 112));
            else if (info.Balance1 > info.Reserve1) // User bought token1
                pnlDictionary[userAddress] += (price1CumulativeNew - info.Price1CumulativeLast) * (BigDecimal)(info.Reserve0 / Math.Pow(2, 112));

            // Subtract Fee
            pnlDictionary[userAddress] -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary);
        }
    }
}