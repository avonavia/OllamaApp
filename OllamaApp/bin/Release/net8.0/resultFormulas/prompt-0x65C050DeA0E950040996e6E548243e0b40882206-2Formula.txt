//C# Formula method for _safeTransfer from Solidity contract

[assembly: FormulaAssembly("_SafeTransfer")]

namespace Sauron.Formula._SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Check if fromAddress is same as toAddress. If so, no PNL change for this transfer.
            if (info.FromAddress == info.ToAddress)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>((IEnumerable<KeyValuePair<string, BigDecimal>>?)null);

            //Get the tokens and their amounts from Transfers object in TransactionInfo
            var tokenAmounts = GetTokensWithAmounts(info.Transfers);

            //Calculate PNL for each unique token
            IEnumerable<KeyValuePair<string, BigDecimal>>? pnlPairs = null;

            if (tokenAmounts != null && tokenPrices != null)
            {
                var pairs = from ta in tokenAmounts
                            join tp in tokenPrices on ta.Key.Symbol equals tp.Key
                            let pnl = BigDecimal.FromDecimal(ta.Value * (decimal)tp.Value) - info.Fee //Subtract fee for each transfer
                            select new KeyValuePair<string, BigDecimal>(info.FromAddress, pnl);
                pnlPairs = pairs.ToList();
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlPairs);
        }
    }
}