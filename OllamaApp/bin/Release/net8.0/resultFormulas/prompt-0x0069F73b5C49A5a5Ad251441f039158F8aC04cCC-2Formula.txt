//Method to calculate PNL for transfer operations
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var result = new Dictionary<string, BigDecimal>();

        if (info.Transfers != null && info.Fee > 0) //Check if there are transfers and a fee is charged
        {
            foreach (var transfer in info.Transfers)
            {
                decimal tokenPrice = GetTokenPrice(transfer.TokenInfo.Symbol, tokenPrices);
                BigDecimal pnl;

                if (info.ToAddress == transfer.FromAddress) //Check if user sent tokens to themselves
                    pnl = -BigDecimal.Multiply(tokenPrice, info.Fee); //In this case, only fee is subtracted from the total value of transferred tokens
                else if (info.FromAddress == transfer.FromAddress) //User sends tokens to another address
                    pnl = BigDecimal.Subtract(BigDecimal.Multiply(transfer.Amount, tokenPrice), BigDecimal.Multiply(tokenPrice, info.Fee)); //PNL is calculated as (amount * token price) - fee
                else //User receives tokens from another address
                    pnl = BigDecimal.Multiply(transfer.Amount, tokenPrice); //PNL is calculated as amount * token price

                if (result.ContainsKey(transfer.FromAddress))
                    result[transfer.FromAddress] += pnl;
                else
                    result[transfer.FromAddress] = pnl;
            }
        }

        return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result); //Return the calculated PNL for each user address in a KeyValuePair format
    }

    private decimal GetTokenPrice(string tokenSymbol, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices)
    {
        if (tokenPrices != null && tokenPrices.Any(tp => tp.Key == tokenSymbol)) //Check if the price for the given token is provided in the input parameters
            return tokenPrices.First(tp => tp.Key == tokenSymbol).Value; //Return the price of the token
        else
            return 0; //If no price is available, assume a zero price for the token
    }