```csharp
[assembly: FormulaAssembly("SafeTransferPNL")] // This name should be exactly as function name in Solidity contract (even if it starts with a lowercase letter)

namespace Sauron.Formula.SafeTransferPNL
{
    public class SafeTransferPNLFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers ?? Enumerable.Empty<TokenTransferInfo>())
            {
                // Check if the transfer is a safe transfer by checking for ERC20 token transfers
                if (transfer.TokenInfo != null && transfer.ToAddress != null)
                {
                    var userAddress = info.FromAddress;

                    // Calculate PNL: subtract fee and adjust based on transfer direction
                    BigDecimal pnlChange = transfer.ToAddress == userAddress ? -transfer.Amount : transfer.Amount;
                    pnlChange -= transfer.Fee; // Subtract the fee from PNL

                    if (!pnlDictionary.ContainsKey(userAddress))
                        pnlDictionary[userAddress] = BigDecimal.Zero;

                    pnlDictionary[userAddress] += pnlChange * GetTokenPrice(transfer.TokenInfo, tokenPrices);
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary.Select(kv => new KeyValuePair<string, BigDecimal>(kv.Key, kv.Value)), null);
        }

        private decimal GetTokenPrice(TokenInfo token, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices)
        {
            if (token == null || tokenPrices == null)
                return 1; // Assume default price of 1 if no price is provided

            var price = tokenPrices.FirstOrDefault(tp => tp.Key == token.Symbol);
            return price.Value != 0 ? price.Value : 1; // Return the found price or default to 1
        }
    }
}
```