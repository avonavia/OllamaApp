//Method to get tokens with their amounts for each transfer
    public IEnumerable<KeyValuePair<TokenInfo, BigDecimal>> GetTokensWithAmounts(List<TokenTransferInfo> transfers)
    {
        foreach (var transfer in transfers)
            yield return new KeyValuePair<TokenInfo, BigDecimal>(transfer.TokenInfo, transfer.Amount);
    }

    //Method to calculate PNL for transaction
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var pnlResult = new List<KeyValuePair<string, BigDecimal>>();

        //Calculate PNL for each fromAddress in transaction
        foreach (var addressGroup in info.Transfers.GroupBy(t => t.FromAddress))
        {
            var totalSpent = GetTokensWithAmounts(addressGroup.ToList()).Sum(t => t.Value);
            //Assuming Fee is subtracted from the totalSpent before burning tokens
            var pnl = -totalSpent; //PNL is negative as user burnt their tokens

            pnlResult.Add(new KeyValuePair<string, BigDecimal>(addressGroup.Key, pnl));
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResult);
    }