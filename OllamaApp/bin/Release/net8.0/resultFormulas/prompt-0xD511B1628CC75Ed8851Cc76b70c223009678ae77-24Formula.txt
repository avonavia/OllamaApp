//Method for Skim Formula

[assembly: FormulaAssembly("Skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Initialize PNL dictionary
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            //Iterate through all transfers in the transaction
            foreach (var transfer in info.Transfers)
            {
                //Calculate PNL for each user address based on transferred tokens and token prices
                if (!pnlDictionary.ContainsKey(transfer.FromAddress))
                    pnlDictionary[transfer.FromAddress] = BigDecimal.Zero;

                if (!pnlDictionary.ContainsKey(transfer.ToAddress))
                    pnlDictionary[transfer.ToAddress] = BigDecimal.Zero;

                var tokenPrice = BigDecimal.One; //Default price is 1 (if no price data provided)
                if (tokenPrices != null && tokenPrices.Any(t => t.Key == transfer.TokenInfo.Symbol))
                    tokenPrice = new BigDecimal((decimal)tokenPrices.FirstOrDefault(t => t.Key == transfer.TokenInfo.Symbol).Value);

                pnlDictionary[transfer.FromAddress] -= transfer.Amount * tokenPrice; //Subtract transferred amount from sender's PNL
                pnlDictionary[transfer.ToAddress] += transfer.Amount * tokenPrice; //Add transferred amount to recipient's PNL
            }

            //Subtract fee from sender's PNL (assuming fee is paid in Eth)
            if (pnlDictionary.ContainsKey(info.FromAddress))
                pnlDictionary[info.FromAddress] -= new BigDecimal((decimal)info.Fee);

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnlDictionary.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}