```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.Transfers == null || !info.Transfers.Any())
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Ok(null);

            var pnl = new Dictionary<string, BigDecimal>();

            // Iterate through each transfer in the transaction
            foreach (var transfer in info.Transfers)
            {
                if (!pnl.ContainsKey(transfer.FromAddress))
                    pnl[transfer.FromAddress] = BigDecimal.Zero;

                // Subtract the transferred amount from PNL, as tokens are being withdrawn
                pnl[transfer.FromAddress] -= transfer.Amount;
            }

            if (tokenPrices != null)
            {
                // Convert token amounts to ETH values
                foreach (var pair in pnl)
                    pnl[pair.Key] *= new BigDecimal(tokenPrices.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value);
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Ok(pnl);
        }
    }
}
```