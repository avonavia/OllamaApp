```csharp
[assembly: FormulaAssembly("_mintFee")]
namespace Sauron.Formula._mintFee
{
    public class _mintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var feeTo = info.FeeTo; // Assuming FeeTo is a field in TransactionInfo
            if (feeTo != "0x")
            {
                var reserve0 = new BigDecimal(info.Reserve0); // Assuming Reserve0 and Reserve1 are fields in TransactionInfo
                var reserve1 = new BigDecimal(info.Reserve1);
                var kLast = new BigDecimal(info.KLast); // Assuming KLast is a field in TransactionInfo
                if (kLast != BigDecimal.Zero)
                {
                    var rootK = BigDecimal.Sqrt(reserve0 * reserve1);
                    var rootKLast = BigDecimal.Sqrt(kLast);
                    if (rootK > rootKLast)
                    {
                        var totalSupply = new BigDecimal(info.TotalSupply); // Assuming TotalSupply is a field in TransactionInfo
                        var numerator = totalSupply * (rootK - rootKLast);
                        var denominator = (rootK * 5) + rootKLast;
                        var liquidity = numerator / denominator;
                        if (liquidity > BigDecimal.Zero)
                            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new[] { new KeyValuePair<string, BigDecimal>(feeTo, -(liquidity * info.EthPrice)) }); // Subtract PNL as user is receiving tokens
                    }
                }
            }
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);
        }
    }
}
```