```csharp
[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlCalculator = new PnLCalculator();
            foreach (var transfer in info.Transfers ?? Enumerable.Empty<TokenTransferInfo>())
            {
                if(transfer.To == info.FromAddress || transfer.To != info.ToAddress)
                    continue; // If token is transferred to sender or not the recipient, ignore for PNL calculation

                var tokenPrice = tokenPrices?.FirstOrDefault(p => p.Key == transfer.TokenInfo.Symbol).Value ?? 0M;
                var amountInEth = transfer.Amount * (BigDecimal)tokenPrice / (10M.Pow(transfer.TokenInfo.Decimals));
                if(info.FromAddress == info.ToAddress)
                    pnlCalculator.Subtract(info.FromAddress, amountInEth); // Subtract if the user sent tokens to themselves
                else
                    pnlCalculator.Add(info.FromAddress, -amountInEth); // Subtract for regular transactions
            }

            var result = pnlCalculator.GetResult();
            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}
```