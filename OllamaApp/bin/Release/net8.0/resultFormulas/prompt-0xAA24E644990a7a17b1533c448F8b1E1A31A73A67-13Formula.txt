//Method to calculate PNL for ERC20 Approval transaction
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        if (info == null || !info.DecodedCall.Success || string.IsNullOrEmpty(info.DecodedCall.Name))
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>() { Success = false };

        //Check if transaction name is Approval (as per Solidity contract)
        if (info.DecodedCall.Name != "_approve")
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>();

        //Get the owner and spender addresses from TransactionInfo's DecodedCall Inputs
        string owner = info.DecodedCall.Inputs[0].AsObject().ToString();
        string spender = info.DecodedCall.Inputs[1].AsObject().ToString();

        //Since this is an approval, there is no direct PNL change for the user who approved
        //Hence, we return null to indicate no PNL change
        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>() { Success = true };
    }