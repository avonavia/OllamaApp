// CalculationResult must always be CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>, having Address-PNL pairs in it or NULL.
   // The start of the formula, except for formula name, always stays the same.

   [assembly: FormulaAssembly("TransferFrom")]

   namespace Sauron.Formula.TransferFrom
   {
       public class TransferFromFormula : IFormulaPlugin
       {
           public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
               IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
           {
               var pnlResults = new Dictionary<string, BigDecimal>();

               // Get the transfer amount in Eth as a BigDecimal.
               var transferAmount = info.Transfers.First().Amount;

               // Calculate PNL for fromAddress and toAddress.
               if (info.From != null)
               {
                   if (!pnlResults.ContainsKey(info.From))
                       pnlResults[info.From] = BigDecimal.Zero;
                   pnlResults[info.From] -= transferAmount; // Subtracting the transferred amount from PNL.
               }

               if (info.To != null)
               {
                   if (!pnlResults.ContainsKey(info.To))
                       pnlResults[info.To] = BigDecimal.Zero;
                   pnlResults[info.To] += transferAmount; // Adding the transferred amount to PNL.
               }

               // Subtract fee from the sender's PNL if they are not the same as the receiver.
               if (info.From != info.To && info.Fee > 0)
               {
                   pnlResults[info.From] -= info.Fee;
               }

               return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnlResults);
           }
       }
   }