//Assembly info for PNL calculation formula
[assembly: FormulaAssembly("Skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.Transfers == null || info.Transfers.Count < 2)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Error("Not enough transfers");

            var token0Transfer = info.Transfers.FirstOrDefault(t => t.TokenInfo.Symbol == "TOKEN0");
            var token1Transfer = info.Transfers.FirstOrDefault(t => t.TokenInfo.Symbol == "TOKEN1");

            if (token0Transfer == null || token1Transfer == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Error("Tokens not found in transfers");

            var userAddress = info.FromAddress; // assuming the user is the one initiating the transaction
            var pnl = BigDecimal.Zero;

            if (tokenPrices == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Error("Token prices not provided");

            var token0Price = tokenPrices.FirstOrDefault(t => t.Key == "TOKEN0").Value;
            var token1Price = tokenPrices.FirstOrDefault(t => t.Key == "TOKEN1").Value;

            if (token0Price == 0 || token1Price == 0)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Error("Invalid token prices");

            pnl -= token0Transfer.Amount * new BigDecimal(token0Price); // subtract the value of tokens sent to 'to'
            pnl -= token1Transfer.Amount * new BigDecimal(token1Price);

            if (info.Fee > 0) // subtract transaction fee in ETH
                pnl -= info.Fee;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.Success(new List<KeyValuePair<string, BigDecimal>> { new KeyValuePair<string, BigDecimal>(userAddress, pnl) });
        }
    }
}