//Method to calculate PNL for renounceOwnership() method of Solidity contract

[assembly: FormulaAssembly("renounceOwnership")]
namespace Sauron.Formula.RenounceOwnership
{
    public class RenounceOwnershipFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var userAddress = info.FromAddress;
            var fee = info.Fee;

            //Since the owner is renouncing ownership, no PNL calculation is needed for them
            //However, we still need to account for the transaction fee

            var pnlResult = new Dictionary<string, BigDecimal>();
            if (pnlResult.ContainsKey(userAddress))
                pnlResult[userAddress] -= fee;
            else
                pnlResult[userAddress] = -fee;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>>.CreateSuccess(pnlResult);
        }
    }
}