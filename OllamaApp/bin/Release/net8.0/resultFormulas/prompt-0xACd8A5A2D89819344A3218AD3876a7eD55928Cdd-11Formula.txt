```csharp
[assembly: FormulaAssembly("SyncFormula")]

namespace Sauron.Formula.SyncFormula
{
    public class SyncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();

            if (info.FromAddress != info.ToAddress && !string.IsNullOrEmpty(info.ToAddress))
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);

            var token0Balance = GetTokenAmountForAddress(info.Transfers, info.FromAddress, info.TokenInfo?.Symbol);
            var token1Balance = GetTokenAmountForAddress(info.Transfers, info.ToAddress, info.TokenInfo2?.Symbol);

            if (!tokenPrices.Any())
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null, "No token prices provided.");

            var token0Price = tokenPrices.FirstOrDefault(t => t.Key == info.TokenInfo?.Symbol).Value;
            var token1Price = tokenPrices.FirstOrDefault(t => t.Key == info.TokenInfo2?.Symbol).Value;

            if (token0Balance != null && token1Balance != null && token0Price > 0 && token1Price > 0)
            {
                var reserve0 = new BigDecimal((decimal)info.Reserve0);
                var reserve1 = new BigDecimal((decimal)info.Reserve1);

                var k = reserve0 * reserve1;
                var x = token0Balance - reserve0 + (k / reserve0).Sqrt();
                var y = token1Balance - reserve1 + (k / reserve1).Sqrt();

                pnl[info.FromAddress] = -(x * new BigDecimal(token0Price) + y * new BigDecimal(token1Price));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl);
        }

        private BigDecimal? GetTokenAmountForAddress(List<TokenTransferInfo> transfers, string address, string? tokenSymbol)
        {
            var transfer = transfers?.FirstOrDefault(t => t.From == address && t.TokenInfo?.Symbol == tokenSymbol);
            return transfer != null ? transfer.Amount : null;
        }
    }
}
```