```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            if (info.FromAddress != null && info.Transfers?.Any() == true)
            {
                foreach(var transfer in info.Transfers)
                {
                    // Calculate PNL for each token skimmed
                    if (tokenPrices?.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value is decimal price)
                        result[info.FromAddress] = result.GetValueOrDefault(info.FromAddress) + transfer.Amount * (BigDecimal)price;
                }
            }

            // Subtract fee from PNL
            if (result.ContainsKey(info.FromAddress))
                result[info.FromAddress] -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            {
                Result = result.Any() ? result : null
            };
        }
    }
}
```