//Assembly info for the formula
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Get the distinct tokens in transaction
            var tokens = info.GetDistinctTokens();

            if (tokens == null)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var userAddresses = info.Transfers?.Select(t => t.From).Distinct() ?? Enumerable.Empty<string>();

            //Initialize a dictionary to store the PNL of each user
            var pnlResult = new Dictionary<string, BigDecimal>();

            foreach (var token in tokens)
            {
                foreach (var address in userAddresses)
                {
                    //Calculate the amount of token transferred by skim function to this user
                    var transferAmount = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol && t.To == address).Sum(t => t.Amount) ?? BigDecimal.Zero;

                    //Calculate the price of transferred tokens in Ethereum
                    var tokenPriceInEth = tokenPrices?.FirstOrDefault(p => p.Key == token.Symbol).Value ?? 0M;
                    var transferValueInEth = BigDecimal.FromDecimal((decimal)tokenPriceInEth * transferAmount);

                    //Subtract the fee from the transferred value in Ethereum if user didn't send tokens to themselves
                    if (info.ToAddress != address)
                        transferValueInEth -= info.Fee;

                    //Update the PNL of this user
                    if (!pnlResult.ContainsKey(address))
                        pnlResult[address] = transferValueInEth;
                    else
                        pnlResult[address] += transferValueInEth;
                }
            }

            //Return the PNL of each user in a CalculationResult object
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResult.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}