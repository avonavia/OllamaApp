```csharp
[assembly: FormulaAssembly("_safeTransfer")]
namespace Sauron.Formula._safeTransfer
{
    public class _safeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var results = new List<KeyValuePair<string, BigDecimal>>();

            // Check if the transaction has transfers and token prices
            if (info.Transfers != null && tokenPrices != null)
            {
                var distinctTokens = info.GetDistinctTokens();

                foreach (var tokenInfo in distinctTokens)
                {
                    // Get all transfers for the current token
                    var tokenTransfers = info.Transfers.Where(t => t.TokenInfo.Symbol == tokenInfo.Symbol);

                    // Calculate the total amount sent to the recipient
                    var totalSentToRecipient = tokenTransfers
                        .Where(t => t.ToAddress != info.FromAddress)
                        .Sum(t => t.Amount);

                    // Subtract the fee from the total amount sent to the recipient
                    var totalSentToRecipientWithoutFee = totalSentToRecipient - info.GasUsed * info.GasPrice;

                    // Get the price of the current token
                    var tokenPrice = tokenPrices.FirstOrDefault(t => t.Key == tokenInfo.Symbol).Value;

                    // Calculate the PNL in Eth
                    var pnl = totalSentToRecipientWithoutFee * new BigDecimal((decimal)tokenPrice);

                    results.Add(new KeyValuePair<string, BigDecimal>(info.FromAddress, -pnl));
                }
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(results);
        }
    }
}
```