```csharp
[assembly: FormulaAssembly("manualSwap")]

namespace Sauron.Formula.ManualSwap
{
    public class ManualSwapFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Check if _msgSender is the same as _taxWallet
            if (info.FromAddress != "TAX_WALLET_ADDRESS")
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var pnl = BigDecimal.Zero;

            // Check token balance and swapEnabled status
            if (info.TokenBalances.TryGetValue("TOKEN_ADDRESS", out var tokenBalance) && tokenBalance > 0 && info.SwapEnabled)
                pnl -= tokenBalance * new BigDecimal(tokenPrices?.FirstOrDefault(p => p.Key == "TOKEN_SYMBOL").Value ?? 0);

            // Check eth balance
            if (info.EthBalance > 0)
                pnl -= info.EthBalance;

            // Subtract fee from PNL
            pnl -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new[] { new KeyValuePair<string, BigDecimal>("User", pnl) });
        }
    }
}
```