// Make sure necessary imports are added
using System;
using System.Numerics;

public class PnlCalculator
{
    public static BigInteger CalculatePnl(BigInteger amount0Out, BigInteger amount1Out, BigInteger reserve0, BigInteger reserve1, BigInteger balance0, BigInteger balance1, BigInteger fee = 3)
    {
        // Initial check to ensure sufficient output amounts
        if (amount0Out == 0 && amount1Out == 0)
            throw new ArgumentException("UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT");

        // Check to ensure sufficient liquidity in the pool
        if (amount0Out >= reserve0 || amount1Out >= reserve1)
            throw new InvalidOperationException("UniswapV2: INSUFFICIENT_LIQUIDITY");

        // Calculate input amounts after the swap
        BigInteger amount0In = balance0 > reserve0 - amount0Out ? balance0 - (reserve0 - amount0Out) : 0;
        BigInteger amount1In = balance1 > reserve1 - amount1Out ? balance1 - (reserve1 - amount1Out) : 0;

        // Ensure sufficient input amounts after the swap
        if (amount0In == 0 && amount1In == 0)
            throw new InvalidOperationException("UniswapV2: INSUFFICIENT_INPUT_AMOUNT");

        // Calculate adjusted balances
        BigInteger balance0Adjusted = balance0 * 1000 - amount0In * fee;
        BigInteger balance1Adjusted = balance1 * 1000 - amount1In * fee;

        // Check the invariant of the UniswapV2 exchange
        if (balance0Adjusted * balance1Adjusted < reserve0 * reserve1 * 1000 * 1000)
            throw new InvalidOperationException("UniswapV2: K");

        // Calculate PNL
        BigInteger pnl = amount0In - (amount1Out * reserve0 / reserve1);

        return pnl;
    }
}