```csharp
[assembly: FormulaAssembly("transferFrom")]
namespace Sauron.Formula.TransferFrom;
public class TransferFromFormula : IFormulaPlugin
{
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var result = new Dictionary<string, BigDecimal>();

        // Iterate over all transfers in the transaction
        foreach (var transfer in info.Transfers)
        {
            var fromAddress = transfer.FromAddress;
            var toAddress = transfer.ToAddress;
            var amount = transfer.Amount;

            // Subtract the amount sent from the sender's balance
            if (result.ContainsKey(fromAddress))
                result[fromAddress] -= amount - info.Fee;
            else
                result[fromAddress] = -amount - info.Fee;

            // Add the amount received to the recipient's balance
            if (toAddress != fromAddress) // Avoid double counting in case of self-transfer
            {
                if (result.ContainsKey(toAddress))
                    result[toAddress] += amount;
                else
                    result[toAddress] = amount;
            }
        }

        return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Successful(result.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
    }
}
```