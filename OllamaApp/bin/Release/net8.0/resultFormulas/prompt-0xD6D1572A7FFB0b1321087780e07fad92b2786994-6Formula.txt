//Method to calculate PNL for a transfer transaction
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
        IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var transfers = info.Transfers;

        if (transfers == null || !transfers.Any())
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
                ("No transfer information available", null);

        var fromAddress = info.FromAddress;
        var toAddress = info.ToAddress;

        if (fromAddress == toAddress)
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
                ("Sender and recipient are the same", null);

        var pnlMap = new Dictionary<string, BigDecimal>();

        foreach (var transfer in transfers.Where(t => t.From == fromAddress || t.To == fromAddress))
        {
            if (!pnlMap.ContainsKey(fromAddress))
                pnlMap[fromAddress] = BigDecimal.Zero;

            // If the sender is the one sending tokens, subtract the amount
            // If the sender is the one receiving tokens, add the amount
            var pnlChange = transfer.From == fromAddress ? -transfer.Amount : transfer.Amount;
            pnlMap[fromAddress] += pnlChange;
        }

        // Subtract fee if applicable
        if (info.Fee > BigDecimal.Zero)
        {
            if (!pnlMap.ContainsKey(fromAddress))
                pnlMap[fromAddress] = BigDecimal.Zero;

            pnlMap[fromAddress] -= info.Fee;
        }

        // Convert PNL to Eth if token price is available
        if (tokenPrices != null)
        {
            var tokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == transfers.First().TokenInfo.Symbol).Value;

            if (tokenPrice > 0)
                foreach (var pair in pnlMap)
                    pnlMap[pair.Key] = BigDecimal.Divide(pair.Value, new BigDecimal((decimal)tokenPrice), 18);
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            (null, pnlMap.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
    }