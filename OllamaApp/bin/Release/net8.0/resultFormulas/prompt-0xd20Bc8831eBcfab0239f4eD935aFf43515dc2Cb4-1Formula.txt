//Formula for getReserves method in Solidity contract

[assembly: FormulaAssembly("getReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //The result is a list of reserve0, reserve1 and blockTimestampLast as KeyValuePairs
            var reservesResult = new List<KeyValuePair<string, BigDecimal>>();

            if (info.Reserve0 != null && info.Reserve1 != null && info.BlockTimestampLast != null)
            {
                //Add reserve0 to the result list
                reservesResult.Add(new KeyValuePair<string, BigDecimal>("reserve0", info.Reserve0));

                //Add reserve1 to the result list
                reservesResult.Add(new KeyValuePair<string, BigDecimal>("reserve1", info.Reserve1));

                //Add blockTimestampLast to the result list (converting from uint32 to BigDecimal)
                reservesResult.Add(new KeyValuePair<string, BigDecimal>("blockTimestampLast", new BigDecimal((decimal)info.BlockTimestampLast)));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(reservesResult);
        }
    }
}