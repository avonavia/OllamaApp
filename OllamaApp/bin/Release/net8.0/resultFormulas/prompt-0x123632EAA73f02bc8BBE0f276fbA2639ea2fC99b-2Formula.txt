//C# Formula method for Solidity contract method _safeTransfer

[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>(); //Dictionary to store PNL for each address

            if (info.Transfers != null && tokenPrices != null)
            {
                foreach (var transfer in info.Transfers)
                {
                    string fromAddress = info.FromAddress;
                    string toAddress = transfer.ToAddress;
                    BigDecimal amount = transfer.Amount;
                    string tokenSymbol = transfer.TokenInfo.Symbol;
                    decimal tokenPrice = tokenPrices.FirstOrDefault(p => p.Key == tokenSymbol).Value;

                    //Check if the transaction is from user to another address
                    if (fromAddress != toAddress)
                    {
                        BigDecimal amountInEth = amount * new BigDecimal((decimal)tokenPrice);

                        //Subtract fee from total outflow
                        if(fromAddress == info.FromAddress)
                            amountInEth -= info.Fee;

                        //Calculate PNL for user address
                        if (pnl.ContainsKey(fromAddress))
                            pnl[fromAddress] -= amountInEth;
                        else
                            pnl[fromAddress] = -amountInEth;
                    }
                }
            }

            //Return PNL as a list of key-value pairs
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl.AsEnumerable());
        }
    }
}