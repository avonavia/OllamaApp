```csharp
[assembly: FormulaAssembly("_mintFee")]
namespace Sauron.Formula._mintFee
{
    public class _mintFeeFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            if (info.Transfers == null || !info.Transfers.Any() || string.IsNullOrEmpty(info.FeeTo))
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> { Error = "Invalid TransactionInfo" };

            var result = new List<KeyValuePair<string, BigDecimal>>();
            var feeOn = false;
            var _kLast = info.KLast;

            foreach (var transfer in info.Transfers)
            {
                feeOn = !string.IsNullOrEmpty(info.FeeTo);

                if (feeOn && _kLast != 0)
                {
                    BigDecimal rootK = BigDecimal.Sqrt((BigDecimal)transfer.Reserve0 * transfer.Reserve1);
                    BigDecimal rootKLast = BigDecimal.Sqrt(_kLast);

                    if (rootK > rootKLast)
                    {
                        BigDecimal numerator = info.TotalSupply * (rootK - rootKLast);
                        BigDecimal denominator = (rootK * 5) + rootKLast;
                        BigDecimal liquidity = numerator / denominator;

                        if (liquidity > 0)
                            result.Add(new KeyValuePair<string, BigDecimal>(info.FeeTo, liquidity));
                    }
                }
                else if (!feeOn && _kLast != 0)
                {
                    info.KLast = 0;
                }
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> { Result = result };
        }
    }
}
```