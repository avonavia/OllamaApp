```csharp
[assembly: FormulaAssembly("_mint")]

namespace Sauron.Formula._mint
{
    public class _mintFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            foreach (var transfer in info.Transfers ?? Enumerable.Empty<TokenTransferInfo>())
            {
                if (!pnlDictionary.ContainsKey(transfer.ToAddress))
                    pnlDictionary[transfer.ToAddress] = BigDecimal.Zero;

                // Since we are minting tokens, the PNL for 'to' address increases by value of minted tokens
                pnlDictionary[transfer.ToAddress] += transfer.Amount;
            }

            var result = new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            {
                Data = pnlDictionary.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)),
            };

            return result;
        }
    }
}
```