[assembly: FormulaAssembly("SwapBack")]

namespace Sauron.Formula.SwapBack
{
    public class SwapBackFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            // Get the contract address
            var contractAddress = info.To;

            // Calculate the total tokens to swap
            var totalTokensToSwap = info.Transfers.Sum(t => t.Amount);

            // If the contract balance is 0 or there are no tokens to swap, return empty result
            if (info.Balance == 0 || totalTokensToSwap == BigDecimal.Zero)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);

            // Limit the contract balance to be not more than twice the swap back threshold
            var contractBalance = info.Balance;
            if (contractBalance > info.SwapBackThreshold * 20)
                contractBalance = info.SwapBackThreshold * 20;

            // Calculate the ETH balance change after the swap
            var initialETHBalance = info.EthBalance;
            var ethBalanceChange = info.ReceivedEth - initialETHBalance;

            // If the Eth price is not provided, we cannot calculate the PNL in Eth
            if (!tokenPrices.Any(t => t.Key == "ETH"))
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("ETH price not found");

            var ethPrice = tokenPrices.FirstOrDefault(t => t.Key == "ETH").Value;

            // Calculate the ETH for dev wallet and marketing wallet
            var ethForDev = ethBalanceChange * info.TokensForDev / totalTokensToSwap;
            var ethForMarketing = ethBalanceChange - ethForDev;

            // Calculate the PNL for dev wallet and marketing wallet in Eth
            var pnlForDev = ethForDev * (decimal)ethPrice;
            var pnlForMarketing = ethForMarketing * (decimal)ethPrice;

            // Subtract the fee from the PNL
            var pnlForContract = -info.Fee * (decimal)ethPrice;

            result[contractAddress] = pnlForContract;
            result[info.DevelopmentWallet] = pnlForDev;
            result[info.MarketingWallet] = pnlForMarketing;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result);
        }
    }
}