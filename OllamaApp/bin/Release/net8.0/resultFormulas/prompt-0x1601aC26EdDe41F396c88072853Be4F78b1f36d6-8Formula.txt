```csharp
// Assembly info for PNL calculation
[assembly: System.Reflection.AssemblyTitle("PNL Calculation")]
[assembly: System.Reflection.AssemblyDescription("Calculate Profit & Loss for a UniswapV2 swap transaction")]

public class PnlCalculator
{
    /// <summary>
    /// Calculates the profit and loss (PNL) for a given swap transaction in Eth.
    /// </summary>
    /// <param name="amount0Out">The amount of Token0 sent to recipient.</param>
    /// <param name="amount1Out">The amount of Token1 sent to recipient.</param>
    /// <param name="reserve0Before">Token0 balance in the contract before swap.</param>
    /// <param name="reserve1Before">Token1 balance in the contract before swap.</param>
    /// <param name="userBalance0Before">User's Token0 balance before swap.</param>
    /// <param name="userBalance1Before">User's Token1 balance before swap.</param>
    /// <param name="userBalance0After">User's Token0 balance after swap.</param>
    /// <param name="userBalance1After">User's Token1 balance after swap.</param>
    /// <returns>Profit and loss (PNL) in Eth for the user from this swap transaction. Negative value means a loss, positive - profit.</returns>
    public decimal CalculatePnl(decimal amount0Out, decimal amount1Out, decimal reserve0Before, decimal reserve1Before, decimal userBalance0Before, decimal userBalance1Before, decimal userBalance0After, decimal userBalance1After)
    {
        // Calculate the PNL for Token0
        decimal pnlToken0 = (userBalance0After - userBalance0Before + amount0Out) * GetEthPrice(reserve0Before, reserve1Before);

        // Calculate the PNL for Token1
        decimal pnlToken1 = (userBalance1After - userBalance1Before + amount1Out) * GetEthPrice(reserve1Before, reserve0Before);

        // Total PNL is a sum of PNLs for both tokens
        decimal totalPnl = pnlToken0 + pnlToken1;

        return totalPnl;
    }

    /// <summary>
    /// Calculates the price of Token0 in Eth.
    /// </summary>
    /// <param name="reserve0">Token0 balance in the contract.</param>
    /// <param name="reserve1">Token1 balance in the contract.</param>
    /// <returns>Price of Token0 in Eth.</returns>
    private decimal GetEthPrice(decimal reserve0, decimal reserve1)
    {
        // Price of Token0 = (Reserve of ETH * Reserve of Token0) / (Reserve of Token0 * Reserve of Token0)
        return (reserve1 * reserve0) / (reserve0 * reserve0);
    }
}
```