//Method to calculate PNL for sendETHToFee Solidity contract method
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        //Check if transaction has only one transfer and it is ETH (since we are sending ETH to fee)
        if (info.Transfers?.Count() != 1 || !info.Transfers.First().TokenInfo.Symbol.Equals("ETH", StringComparison.OrdinalIgnoreCase))
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

        //Get the ETH transfer amount
        var ethTransferAmount = info.Transfers.First().Amount;

        //Check if user sent ETH to fee wallet address (assuming _taxWallet is a public variable in Solidity contract)
        if (info.ToAddress == _taxWallet)
        {
            //User paid the fee, so PNL is negative equal to the transfer amount
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new[]
            {
                new KeyValuePair<string, BigDecimal>(info.FromAddress, -ethTransferAmount)
            });
        }
        else
        {
            //User didn't pay the fee, so PNL is not affected
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new[]
            {
                new KeyValuePair<string, BigDecimal>(info.FromAddress, 0)
            });
        }
    }