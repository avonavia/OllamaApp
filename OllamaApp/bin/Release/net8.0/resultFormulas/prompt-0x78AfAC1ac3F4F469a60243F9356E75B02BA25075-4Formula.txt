//Method to get tokens and their amounts for each transfer
    public IEnumerable<KeyValuePair<TokenInfo, BigDecimal>> GetTokensWithAmounts(List<TokenTransferInfo> transfers)
    {
        foreach (var transfer in transfers)
            yield return new KeyValuePair<TokenInfo, BigDecimal>(transfer.TokenInfo, transfer.Amount);
    }

    //Method to get PNL for the transaction based on minting and receiving tokens
    public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
    {
        var pnl = new Dictionary<string, BigDecimal>();

        if (info.Transfers != null)
        {
            var tokensWithAmounts = GetTokensWithAmounts(info.Transfers).ToList();

            foreach (var tokenAmount in tokensWithAmounts)
            {
                //Only consider minted tokens that are received by the user
                if (tokenAmount.Key.Symbol == "YOUR_TOKEN_SYMBOL" && info.ToAddress != null && tokenAmount.Value > 0 && !pnl.ContainsKey(info.ToAddress))
                {
                    var price = tokenPrices?.FirstOrDefault(tp => tp.Key == tokenAmount.Key.Symbol).Value ?? 0;
                    pnl[info.ToAddress] = (tokenAmount.Value * price) - info.Fee; //PNL is calculated as (value of received tokens - transaction fee)
                }
            }
        }

        return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnl.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
    }