[assembly: FormulaAssembly("SwapTokensForExactTokens")]

namespace Sauron.Formula.SwapTokensForExactTokens
{
    public class SwapTokensForExactTokensFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Initialize an empty list to store address-PNL pairs
            var pnlList = new List<KeyValuePair<string, BigDecimal>>();

            if (info.Transfers != null && info.FromAddress != null && info.ToAddress != null && tokenPrices != null)
            {
                // Get the price of the input token and output token
                var inputTokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == info.Transfers[0].Symbol).Value;
                var outputTokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == info.Transfers[^1].Symbol).Value;

                // Calculate the input amount in Eth and output amount in Eth
                var inputAmountEth = (decimal)info.Transfers[0].Amount * inputTokenPrice;
                var outputAmountEth = (decimal)info.Transfers[^1].Amount * outputTokenPrice;

                // Calculate the PNL for the sender address
                var pnlSender = new BigDecimal(outputAmountEth - inputAmountEth - info.Fee);
                pnlList.Add(new KeyValuePair<string, BigDecimal>(info.FromAddress, pnlSender));

                // Calculate the PNL for the receiver address (if it's different from the sender)
                if (info.ToAddress != info.FromAddress)
                {
                    var pnlReceiver = new BigDecimal(inputAmountEth - outputAmountEth);
                    pnlList.Add(new KeyValuePair<string, BigDecimal>(info.ToAddress, pnlReceiver));
                }
            }

            // Return the list of address-PNL pairs or NULL if there are no transfers
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> { Result = pnlList };
        }
    }
}