```csharp
[assembly: FormulaAssembly("removeLimits")]

namespace Sauron.Formula.RemoveLimits
{
    public class RemoveLimitsFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Check if the sender is the owner of the contract
            var ownerAddress = info.Owner; // Assuming that the owner address is stored in TransactionInfo
            var senderAddress = info.From;

            if (ownerAddress != senderAddress)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("Only the owner can call this function.");

            // Update the max transaction amount and max wallet size
            var totalSupply = info.TokenInfo.TotalSupply; // Assuming that the total supply is stored in TokenInfo object
            info.MaxTxAmount = totalSupply;
            info.MaxWalletSize = totalSupply;

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(null);
        }
    }
}
```
This code defines a C# method for calculating the PNL of a transaction that calls the `removeLimits()` function in the Solidity contract. The method checks if the sender of the transaction is the owner of the contract and updates the maximum transaction amount and maximum wallet size accordingly. If the sender is not the owner, an error message is returned. Otherwise, the calculation result contains no data (since this function doesn't affect the PNL) with a success status code.