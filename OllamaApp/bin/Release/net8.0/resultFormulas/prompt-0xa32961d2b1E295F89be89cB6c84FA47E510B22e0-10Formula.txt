//Method to get PNL for sync method of UniswapV2Pair Solidity contract

[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            // Get distinct tokens in the transaction
            var tokens = info.GetDistinctTokens();

            if (tokens == null)
                return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Error("No tokens found in the transaction");

            foreach (var token in tokens)
            {
                var transfers = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol);

                if (transfers == null || !transfers.Any())
                    continue;

                // Calculate PNL for each address
                foreach (var transfer in transfers)
                {
                    var fromAddress = transfer.FromAddress;
                    var toAddress = transfer.ToAddress;
                    var amount = transfer.Amount;

                    if (!pnlDictionary.ContainsKey(fromAddress))
                        pnlDictionary[fromAddress] = BigDecimal.Zero;

                    if (!pnlDictionary.ContainsKey(toAddress))
                        pnlDictionary[toAddress] = BigDecimal.Zero;

                    // If the transaction is a swap, update PNL for both addresses
                    if (fromAddress != toAddress)
                    {
                        var tokenPrice = tokenPrices?.FirstOrDefault(t => t.Key == token.Symbol).Value ?? 0m;
                        pnlDictionary[fromAddress] -= amount * new BigDecimal(tokenPrice);
                        pnlDictionary[toAddress] += amount * new BigDecimal(tokenPrice);
                    }
                }
            }

            // Subtract fee from sender's PNL
            if (pnlDictionary.ContainsKey(info.From))
            {
                var fee = info.Fee ?? BigDecimal.Zero;
                pnlDictionary[info.From] -= fee;
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(pnlDictionary);
        }
    }
}