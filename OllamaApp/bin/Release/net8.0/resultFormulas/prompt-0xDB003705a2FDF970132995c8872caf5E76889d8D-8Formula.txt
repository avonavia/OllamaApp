```csharp
using System;

// Assembly Information
[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

namespace UniswapV2Calculator
{
    public class PNLCalculator
    {
        // Method to calculate PNL for a swap transaction
        public static decimal CalculatePNL(decimal amount0Out, decimal amount1Out, decimal reserve0, decimal reserve1, decimal balance0, decimal balance1)
        {
            // Calculate the input amounts based on the balances and reserves
            decimal amount0In = balance0 > reserve0 - amount0Out ? balance0 - (reserve0 - amount0Out) : 0;
            decimal amount1In = balance1 > reserve1 - amount1Out ? balance1 - (reserve1 - amount1Out) : 0;

            // Calculate the adjusted balances for checking against the constant product invariant
            decimal balance0Adjusted = balance0 * 1000 - amount0In * 3;
            decimal balance1Adjusted = balance1 * 1000 - amount1In * 3;

            // Calculate the PNL based on the input and output amounts, and adjust it for fees if necessary
            decimal pnl = (amount0Out * reserve1 / reserve0) + amount1Out - (amount0In + amount1In);
            return pnl;
        }
    }
}
```