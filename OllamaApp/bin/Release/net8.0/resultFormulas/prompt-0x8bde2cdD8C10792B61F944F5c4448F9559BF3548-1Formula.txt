//Assembly info for PNL calculation formula
[assembly: FormulaAssembly("GetReserves")]

namespace Sauron.Formula.GetReserves
{
    public class GetReservesFormula : IFormulaPlugin
    {
        /// <summary>
        /// Calculate the reserves of a transaction
        /// </summary>
        /// <param name="info">Transaction information</param>
        /// <param name="tokenPrices">Token prices, not used in this formula</param>
        /// <returns>A collection of reserve values for each token and block timestamp last</returns>
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Get unique tokens in the transaction
            var tokens = info.GetDistinctTokens();

            if (tokens == null || !tokens.Any())
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(null);

            var result = new List<KeyValuePair<string, BigDecimal>>();

            //Iterate over each token and calculate its reserve
            foreach (var token in tokens)
            {
                var transfersForToken = info.Transfers?.Where(t => t.TokenInfo.Symbol == token.Symbol);

                if (transfersForToken != null && transfersForToken.Any())
                {
                    //Calculate the total amount of the token transferred in this transaction
                    var reserve = transfersForToken.Sum(t => t.Amount);

                    result.Add(new KeyValuePair<string, BigDecimal>(token.Symbol, reserve));
                }
            }

            //Add the block timestamp last to the results
            result.Add(new KeyValuePair<string, BigDecimal>("BlockTimestampLast", (BigDecimal)info.BlockTimeStamp));

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(result);
        }
    }
}