```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info, IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            if (info.Transfers != null)
            {
                foreach (var transfer in info.Transfers)
                {
                    string address = transfer.TokenInfo.Address;
                    BigDecimal amount = transfer.Amount;

                    if (result.ContainsKey(address))
                        result[address] += amount;
                    else
                        result[address] = amount;
                }
            }

            // Subtract fee from PNL
            if (!string.IsNullOrEmpty(info.FromAddress) && tokenPrices != null)
            {
                foreach (var pair in result)
                {
                    var price = tokenPrices.FirstOrDefault(tp => tp.Key == pair.Key).Value;
                    if (price > 0)
                        result[pair.Key] -= info.Fee * (1 / new BigDecimal(price));
                }
            }

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.Success(result.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}
```