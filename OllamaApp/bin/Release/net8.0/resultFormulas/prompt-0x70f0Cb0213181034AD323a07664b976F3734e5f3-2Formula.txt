```csharp
[assembly: FormulaAssembly("_safeTransfer")]
namespace Sauron.Formula._safeTransfer
{
    public class _safeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the tokens and their amounts in the transaction
            var tokensWithAmounts = info.GetTokensWithAmounts();

            // Initialize a dictionary to store PNL for each address
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            foreach (var tokenWithAmount in tokensWithAmounts)
            {
                // Subtract the fee from the amount
                var amount = tokenWithAmount.Value - info.Fee;

                // If the to address is not the same as the from address, then user has sent money to another address
                if (info.ToAddress != info.FromAddress)
                {
                    // Decrease PNL for the sender
                    pnlDictionary[info.FromAddress] = (pnlDictionary.ContainsKey(info.FromAddress) ? pnlDictionary[info.FromAddress] : BigDecimal.Zero) - amount * tokenWithAmount.Key.Price;
                }
            }

            // Convert dictionary to list of KeyValuePairs for return
            var result = pnlDictionary.Select(x => new KeyValuePair<string, BigDecimal>(x.Key, x.Value)).ToList();

            return CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>.SuccessWithData(result);
        }
    }
}
```