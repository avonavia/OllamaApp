```csharp
[assembly: FormulaAssembly("SafeTransfer")]

namespace Sauron.Formula.SafeTransfer
{
    public class SafeTransferFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnlResults = new List<KeyValuePair<string, BigDecimal>>();

            // Get unique users involved in the transaction
            var userAddresses = info.Transfers?.Select(t => t.From).Distinct().ToList() ?? new List<string>();
            if (info.To != null) userAddresses.Add(info.To);

            foreach (var address in userAddresses)
            {
                var totalPnl = BigDecimal.Zero;

                // Calculate outgoing transfers
                var outgoingTransfers = info.Transfers?.Where(t => t.From == address).ToList() ?? new List<TokenTransferInfo>();
                foreach (var transfer in outgoingTransfers)
                {
                    if (tokenPrices != null && tokenPrices.Any(tp => tp.Key == transfer.TokenInfo.Symbol))
                    {
                        var price = tokenPrices.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value;
                        totalPnl -= (transfer.Amount * new BigDecimal((decimal)price));
                    }
                }

                // Calculate incoming transfers
                var incomingTransfers = info.Transfers?.Where(t => t.To == address).ToList() ?? new List<TokenTransferInfo>();
                foreach (var transfer in incomingTransfers)
                {
                    if (tokenPrices != null && tokenPrices.Any(tp => tp.Key == transfer.TokenInfo.Symbol))
                    {
                        var price = tokenPrices.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value;
                        totalPnl += (transfer.Amount * new BigDecimal((decimal)price));
                    }
                }

                // Subtract the fee from the total PNL
                if (info.Fee != null)
                {
                    var ethPrice = tokenPrices?.FirstOrDefault(tp => tp.Key == "ETH").Value ?? 0;
                    totalPnl -= (new BigDecimal((decimal)ethPrice * info.Fee));
                }

                pnlResults.Add(new KeyValuePair<string, BigDecimal>(address, totalPnl));
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlResults);
        }
    }
}
```