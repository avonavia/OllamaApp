```csharp
[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.Skim
{
    public class SkimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var pnl = new Dictionary<string, BigDecimal>();

            if (info.Transfers != null && info.ToAddress != null)
            {
                foreach (var transfer in info.Transfers)
                {
                    // Get the token symbol from TokenInfo
                    var tokenSymbol = transfer.TokenInfo.Symbol;

                    // If the token is not already in the dictionary, add it with the transferred amount
                    if (!pnl.ContainsKey(tokenSymbol))
                        pnl[tokenSymbol] = transfer.Amount;
                    else
                        // If the token is already in the dictionary, update its value by adding the transferred amount
                        pnl[tokenSymbol] += transfer.Amount;
                }
            }

            // Convert dictionary to IEnumerable<KeyValuePair<string, BigDecimal>> and return it as CalculationResult
            var result = pnl.Select(x => new KeyValuePair<string, BigDecimal>(x.Key, x.Value));
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(result);
        }
    }
}
```