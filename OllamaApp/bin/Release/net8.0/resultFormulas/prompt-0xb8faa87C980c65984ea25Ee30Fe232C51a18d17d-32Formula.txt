// This formula checks if the new amount is within the allowed range for updating the swap back options

[assembly: FormulaAssembly("UpdateSwapBackOptions")]

namespace Sauron.Formula.UpdateSwapBackOptions
{
    public class UpdateSwapBackOptionsFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Get the total supply of tokens from transfers (assuming it's always the same token)
            var totalSupply = info.GetDistinctTokens()?.FirstOrDefault()?.Amount;

            if (totalSupply == null)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>("Total supply not found");

            // Get the new amount from transfers (assuming it's always the first transfer and it's the new amount)
            var newAmount = info.Transfers?.FirstOrDefault()?.Amount;

            if (newAmount == null)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>("New amount not found");

            // Check if the new amount is within the allowed range
            var minAmount = totalSupply * 1 / 100000;
            var maxAmount = totalSupply * 5 / 1000;

            if (newAmount < minAmount || newAmount > maxAmount)
                return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>($"New amount is not within the allowed range of {minAmount} to {maxAmount}");

            // If everything is ok, no PNL change
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(new List<KeyValuePair<string, BigDecimal>>());
        }
    }
}