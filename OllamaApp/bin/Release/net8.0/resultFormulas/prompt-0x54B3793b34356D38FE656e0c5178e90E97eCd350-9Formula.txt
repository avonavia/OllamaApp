```csharp
[assembly: FormulaAssembly("skim")]
namespace Sauron.Formula.skim
{
    using Nethereum.Util;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Numerics;

    public class skimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            var result = new Dictionary<string, BigDecimal>();

            if (info.Transfers != null && tokenPrices != null)
            {
                foreach (var transfer in info.Transfers)
                {
                    if (transfer.ToAddress == info.FromAddress) // Checking if the to address is the same as from address
                    {
                        var tokenPrice = tokenPrices.FirstOrDefault(tp => tp.Key == transfer.TokenInfo.Symbol).Value;
                        var ethAmount = BigDecimal.Multiply(transfer.Amount, new BigDecimal(tokenPrice));
                        if (result.ContainsKey(info.FromAddress))
                            result[info.FromAddress] += ethAmount;
                        else
                            result[info.FromAddress] = ethAmount;
                    }
                }

                // Subtracting the Fee from PNL
                if (result.ContainsKey(info.FromAddress))
                    result[info.FromAddress] -= info.Fee;
            }

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(result.Any() ? result : null);
        }
    }
}
```