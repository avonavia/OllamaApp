//Assembly name must be exactly as function name in Solidity contract
[assembly: FormulaAssembly("sync")]

namespace Sauron.Formula.sync
{
    public class syncFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            //Calculate the balance of token0 and token1 in the contract
            var balanceToken0 = info.Transfers?.FirstOrDefault(t => t.TokenInfo.Symbol == "token0")?.Amount ?? 0;
            var balanceToken1 = info.Transfers?.FirstOrDefault(t => t.TokenInfo.Symbol == "token1")?.Amount ?? 0;

            //Assuming reserve0 and reserve1 are stored in some way, you need to replace this with actual retrieval
            BigDecimal reserve0 = 0; //Replace with actual value
            BigDecimal reserve1 = 0; //Replace with actual value

            //Calculate the PNL based on the sync formula
            var pnlToken0 = balanceToken0 * (reserve1 / reserve0) - balanceToken0;
            var pnlToken1 = balanceToken1 * (reserve0 / reserve1) - balanceToken1;

            //Subtract fees if any
            //This is a placeholder, replace it with actual fee calculation if needed
            BigDecimal fees = 0; //Replace with actual value
            pnlToken0 -= fees;
            pnlToken1 -= fees;

            //Convert PNL to Eth using token prices if available
            decimal priceToken0 = tokenPrices?.FirstOrDefault(t => t.Key == "token0").Value ?? 1;
            decimal priceToken1 = tokenPrices?.FirstOrDefault(t => t.Key == "token1").Value ?? 1;
            var pnlEthToken0 = pnlToken0 / (decimal)priceToken0;
            var pnlEthToken1 = pnlToken1 / (decimal)priceToken1;

            //Return the PNL for each user address, assuming the contract's address is also a user address
            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>
            {
                Result = new List<KeyValuePair<string, BigDecimal>>
                {
                    new KeyValuePair<string, BigDecimal>(info.ToAddress, pnlEthToken0 + pnlEthToken1)
                }
            };
        }
    }
}