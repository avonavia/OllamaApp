[assembly: FormulaAssembly("skim")]

namespace Sauron.Formula.skim
{
    public class skimFormula : IFormulaPlugin
    {
        public CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?> Formula(TransactionInfo info,
            IEnumerable<KeyValuePair<string, decimal>>? tokenPrices = null)
        {
            // Initialize a dictionary to store address-PNL pairs.
            var pnlDictionary = new Dictionary<string, BigDecimal>();

            // Get the toAddress from TransactionInfo.
            string toAddress = info.ToAddress;

            // Iterate through each transfer in Transfers object of TransactionInfo.
            foreach (var transfer in info.Transfers)
            {
                TokenInfo token = transfer.TokenInfo;
                BigDecimal amount = transfer.Amount;

                // If the toAddress is not in the dictionary, add it with a new PNL value.
                if (!pnlDictionary.ContainsKey(toAddress))
                    pnlDictionary[toAddress] = BigDecimal.Zero;

                // Calculate PNL for the toAddress.
                // If tokenPrices is null, we assume that all tokens are priced at 1 Eth.
                if (tokenPrices == null || !tokenPrices.Any(x => x.Key == token.Symbol))
                    pnlDictionary[toAddress] += amount;
                else
                    pnlDictionary[toAddress] += amount * new BigDecimal(tokenPrices.FirstOrDefault(x => x.Key == token.Symbol).Value);
            }

            // Subtract the Fee from PNL for toAddress.
            if (pnlDictionary.ContainsKey(toAddress))
                pnlDictionary[toAddress] -= info.Fee;

            return new CalculationResult<IEnumerable<KeyValuePair<string, BigDecimal>>?>(pnlDictionary.Select(kvp => new KeyValuePair<string, BigDecimal>(kvp.Key, kvp.Value)));
        }
    }
}